package org.proteored.pacom.gui.tasks;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import javax.swing.JTree;
import javax.swing.SwingWorker;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

import org.proteored.miapeapi.interfaces.MiapeDocument;
import org.proteored.miapeapi.interfaces.MiapeHeader;
import org.proteored.miapeapi.webservice.clients.miapeapi.IntegerString;
import org.proteored.miapeapi.webservice.clients.miapeapi.MiapeAPIWebserviceDelegate;
import org.proteored.miapeapi.webservice.clients.miapeapi.MiapeDatabaseException_Exception;
import org.proteored.miapeapi.webservice.clients.miapeapi.MiapeSecurityException_Exception;
import org.proteored.miapeapi.xml.ge.autogenerated.GEMIAPEGE;
import org.proteored.pacom.analysis.gui.components.ExtendedJTree;
import org.proteored.pacom.utils.Wrapper;

public class TreeLoaderTask extends SwingWorker<Void, String> {
	public static final String TREE_LOADER_STARTS = "tree loader starts";
	public static final String TREE_LOADER_DONE = "tree loader done";
	public static final String TREE_LOADER_MS_NUMBER = "tree loader ms number";
	public static final String TREE_LOADER_MSI_NUMBER = "tree loader msi number";
	public static final String TREE_LOADER_GE_NUMBER = "tree loader ge number";
	public static final String TREE_LOADER_GI_NUMBER = "tree loader gi number";
	public static final String TREE_LOADER_CANCELED = "tree loader canceled";
	private final JTree jTreeMS;
	private final JTree jTreeMSI;
	private final JTree jTreeGE;
	private final JTree jTreeGI;
	private final String userName;
	private final String password;
	private MiapeAPIWebserviceDelegate miapeAPIWebservice;
	private static org.apache.log4j.Logger log = org.apache.log4j.Logger
			.getLogger("log4j.logger.org.proteored");

	public TreeLoaderTask(ExtendedJTree jTree_MiapeMS,
			ExtendedJTree jTree_MiapeMSI, ExtendedJTree jTree_MiapeGE,
			ExtendedJTree jTree_MiapeGI, String userName, String pass) {
		this.jTreeMS = jTree_MiapeMS;
		this.jTreeMSI = jTree_MiapeMSI;
		this.jTreeGE = jTree_MiapeGE;
		this.jTreeGI = jTree_MiapeGI;
		this.userName = userName;
		this.password = pass;

	}

	@Override
	protected Void doInBackground() throws Exception {
		WebservicesLoaderTask webserviceLoader = WebservicesLoaderTask
				.getInstace();
		this.miapeAPIWebservice = webserviceLoader.getMiapeAPIWebservice(true);

		startTreeLoading();
		return null;

	}

	private void startTreeLoading() {
		firePropertyChange(TREE_LOADER_STARTS, null, null);

		try {
			setProgress(0);

			// Disable tree while the tree is being filled
			// if (this.jTreeMS != null)
			// this.jTreeMS.setEnabled(false);
			// if (this.jTreeMSI != null)
			// this.jTreeMSI.setEnabled(false);
			// if (this.jTreeGE != null)
			// this.jTreeGE.setEnabled(false);
			// if (this.jTreeGI != null)
			// this.jTreeGI.setEnabled(false);

			// fill tree
			log.info("Loading GE, GI, MS and MSI projects with reading permissions...");

			filltree(this.jTreeMS, this.jTreeMSI, this.jTreeGE, this.jTreeGI);

			// enable tree
			// if (this.jTreeMS != null)
			// this.jTreeMS.setEnabled(true);
			// if (this.jTreeMSI != null)
			// this.jTreeMSI.setEnabled(true);
			// if (this.jTreeGE != null)
			// this.jTreeGE.setEnabled(true);
			// if (this.jTreeGI != null)
			// this.jTreeGI.setEnabled(true);
			firePropertyChange(TREE_LOADER_DONE, null, null);
		} catch (MiapeSecurityException_Exception ex) {
		} catch (MiapeDatabaseException_Exception ex) {
			ex.printStackTrace();
			log.info(ex.getMessage());
			firePropertyChange("notificacion", null, ex.getMessage());
		} catch (RemoteException ex) {
			ex.printStackTrace();
			log.info(ex.getMessage());
			firePropertyChange("notificacion", null, ex.getMessage());
		} catch (InterruptedException e) {

		}

	}

	@Override
	protected void done() {

		if (!this.isCancelled())
			firePropertyChange("notificacion", null,
					"MIAPE MS and MSI documents loaded.");
		else
			firePropertyChange(TREE_LOADER_CANCELED, null, null);
	}

	private void filltree(JTree jTreeMS, JTree jTreeMSI, JTree jTreeGE,
			JTree jTreeGI) throws MiapeSecurityException_Exception,
			MiapeDatabaseException_Exception, RemoteException,
			InterruptedException {

		int progress = 0;
		String project_label, MIAPE_label;
		int miapeMSCount = 0;
		int miapeMSICount = 0;
		int miapeGECount = 0;
		int miapeGICount = 0;

		// MODELS
		DefaultTreeModel modeloArbolMS = null;
		DefaultTreeModel modeloArbolMSI = null;
		DefaultMutableTreeNode nodoRaizMS = null;
		DefaultMutableTreeNode nodoRaizMSI = null;
		DefaultTreeModel modeloArbolGE = null;
		DefaultTreeModel modeloArbolGI = null;
		DefaultMutableTreeNode nodoRaizGE = null;
		DefaultMutableTreeNode nodoRaizGI = null;
		// RAIZ MS
		if (jTreeMS != null) {
			nodoRaizMS = new DefaultMutableTreeNode("Projects");
			modeloArbolMS = new DefaultTreeModel(nodoRaizMS);
			jTreeMS.setModel(modeloArbolMS);
		}

		// RAIZ MSI
		if (jTreeMSI != null) {
			nodoRaizMSI = new DefaultMutableTreeNode("Projects");
			modeloArbolMSI = new DefaultTreeModel(nodoRaizMSI);
			jTreeMSI.setModel(modeloArbolMSI);
		}

		// RAIZ GE
		if (jTreeGE != null) {
			nodoRaizGE = new DefaultMutableTreeNode("Projects");
			modeloArbolGE = new DefaultTreeModel(nodoRaizGE);
			jTreeGE.setModel(modeloArbolGE);
		}

		// RAIZ GI
		if (jTreeGI != null) {
			nodoRaizGI = new DefaultMutableTreeNode("Projects");
			modeloArbolGI = new DefaultTreeModel(nodoRaizGI);
			jTreeGI.setModel(modeloArbolGI);
		}

		log.info("Getting all projects from user");
		HashMap<Integer, String> projects = Wrapper
				.getHashMap(this.miapeAPIWebservice.getAllProjects(userName,
						password));
		// sort by ID
		List<Integer> sortedProjectIndexes = getSortedKeyList(projects);

		log.info(projects.size() + " projects retrieved");
		for (int i = sortedProjectIndexes.size() - 1; i >= 0; i--) {
			// Para que se pueda interrumpir el proceso
			Thread.sleep(1L);
			int idProject = sortedProjectIndexes.get(i);
			progress++;
			int progress_number = 100 * progress / projects.size();
			setProgress(progress_number);
			log.info(progress + "/" + projects.size() + " project");
			project_label = idProject + ": " + projects.get(idProject);
			DefaultMutableTreeNode ms_project_node = new DefaultMutableTreeNode(
					project_label);
			DefaultMutableTreeNode msi_project_node = new DefaultMutableTreeNode(
					project_label);
			DefaultMutableTreeNode ge_project_node = new DefaultMutableTreeNode(
					project_label);
			DefaultMutableTreeNode gi_project_node = new DefaultMutableTreeNode(
					project_label);

			// Project project = getProject(idProject, userName, password);
			log.info("Getting miape document for project id: " + idProject);
			List<IntegerString> miapeList = this.miapeAPIWebservice
					.getMiapesByProjectID(idProject, userName, password);
			HashMap<String, List<Integer>> miapesByType = getMappedKeyList(miapeList);
			// sort by ID
			// List<Integer> sortedMIAPEIndexes = getSortedKeyList(miapeList);

			log.info(miapeList.size() + " documents loaded from project "
					+ idProject);
			for (String miapeType : miapesByType.keySet()) {
				List<Integer> miapeIds = miapesByType.get(miapeType);
				Collections.sort(miapeIds);
				for (Integer id : miapeIds) {
					// in order to let cancel this task
					Thread.sleep(1L);

					if (jTreeMS != null && miapeType.equals("MS")) {
						MiapeDocument miapeHeader = getMiapeMS(id, userName,
								password);
						if (miapeHeader != null) {
							MIAPE_label = "MIAPE MS " + id + " '"
									+ miapeHeader.getName() + "'";
							DefaultMutableTreeNode MIAPE_node = new DefaultMutableTreeNode(
									MIAPE_label);
							ms_project_node.add(MIAPE_node);
							miapeMSCount++;
							firePropertyChange(TREE_LOADER_MS_NUMBER, null,
									miapeMSCount);

						}
					}

					if (jTreeMSI != null && miapeType.equals("MSI")) {
						MiapeDocument miapeHeader = getMiapeMSI(id, userName,
								password);
						if (miapeHeader != null) {
							MIAPE_label = "MIAPE MSI " + id + " '"
									+ miapeHeader.getName() + "'";
							DefaultMutableTreeNode MIAPE_node = new DefaultMutableTreeNode(
									MIAPE_label);
							msi_project_node.add(MIAPE_node);

							miapeMSICount++;
							firePropertyChange(TREE_LOADER_MSI_NUMBER, null,
									miapeMSICount);

						}
					}
					if (jTreeGE != null && miapeType.equals("GE")) {
						MiapeDocument miapeHeader = getMiapeGE(id, userName,
								password);
						if (miapeHeader != null) {
							MIAPE_label = "MIAPE GE " + id + " '"
									+ miapeHeader.getName() + "'";
							DefaultMutableTreeNode MIAPE_node = new DefaultMutableTreeNode(
									MIAPE_label);
							ge_project_node.add(MIAPE_node);

							miapeGECount++;
							firePropertyChange(TREE_LOADER_GE_NUMBER, null,
									miapeGECount);

						}
					}
					if (jTreeGI != null && miapeType.equals("GI")) {
						MiapeDocument miapeHeader = getMiapeGI(id, userName,
								password);
						if (miapeHeader != null) {
							MIAPE_label = "MIAPE GI " + id + " '"
									+ miapeHeader.getName() + "'";
							DefaultMutableTreeNode MIAPE_node = new DefaultMutableTreeNode(
									MIAPE_label);
							gi_project_node.add(MIAPE_node);

							miapeGICount++;
							firePropertyChange(TREE_LOADER_GI_NUMBER, null,
									miapeGICount);

						}
					}
					/* } */
					// modeloArbol.reload();
				}
				if (ms_project_node != null
						&& ms_project_node.getChildCount() > 0) {
					// only if it has children/MIAPEs
					nodoRaizMS.add(ms_project_node);
					modeloArbolMS.nodeStructureChanged(nodoRaizMS);
				}
				if (msi_project_node != null
						&& msi_project_node.getChildCount() > 0) {
					// only if it has children/MIAPEs
					nodoRaizMSI.add(msi_project_node);
					modeloArbolMSI.nodeStructureChanged(nodoRaizMSI);
				}
				if (ge_project_node != null
						&& ge_project_node.getChildCount() > 0) {
					// only if it has children/MIAPEs
					nodoRaizGE.add(ge_project_node);
					modeloArbolGE.nodeStructureChanged(nodoRaizGE);
				}
				if (gi_project_node != null
						&& gi_project_node.getChildCount() > 0) {
					// only if it has children/MIAPEs
					nodoRaizGI.add(gi_project_node);
					modeloArbolGI.nodeStructureChanged(nodoRaizGI);
				}
				if (modeloArbolMS != null) {
					modeloArbolMS.reload();

				}
				if (modeloArbolMSI != null) {
					modeloArbolMSI.reload();
				}
				if (modeloArbolGE != null) {
					modeloArbolGE.reload();

				}
				if (modeloArbolGI != null) {
					modeloArbolGI.reload();
				}
			}
		}

	}

	private HashMap<String, List<Integer>> getMappedKeyList(
			List<IntegerString> miapeList) {
		HashMap<String, List<Integer>> map = new HashMap<String, List<Integer>>();

		if (miapeList != null) {
			for (IntegerString integerString : miapeList) {
				String miapeType = integerString.getMiapeType();
				if (map.containsKey(miapeType)) {
					map.get(miapeType).add(integerString.getMiapeID());
				} else {
					List<Integer> list = new ArrayList<Integer>();
					list.add(integerString.getMiapeID());
					map.put(miapeType, list);
				}
			}
		}
		return map;
	}

	/**
	 * Gets a list of keys from a {@link HashMap} and ordered
	 * 
	 * @param projects
	 * @return
	 */
	private List<Integer> getSortedKeyList(HashMap<Integer, String> projects) {
		if (projects == null)
			return null;
		List<Integer> ret = new ArrayList<Integer>(projects.keySet());

		Collections.sort(ret);
		return ret;
	}

	/**
	 * Gets a miape header from the DB using the webservice
	 * 
	 * @param idMiapeGE
	 * @param userName
	 * @param password
	 * @return the {@link GEMIAPEGE} object or null of something is wrong
	 */
	private MiapeDocument getMiapeGE(Integer idMiapeGE, String userName,
			String password) {

		byte[] miapeHeaderBytes;
		try {
			// log.info("Getting MIAPE GE Header id = " + idMiapeGE);
			miapeHeaderBytes = this.miapeAPIWebservice.getMiapeGEHeaderById(
					idMiapeGE, userName, password);
			MiapeHeader miapeHeader = new MiapeHeader(miapeHeaderBytes);
			return miapeHeader.getMiapeDocument();
		} catch (MiapeSecurityException_Exception e) {
			log.info("Error retrieving MIAPE GE: " + e.getMessage());
		} catch (MiapeDatabaseException_Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	/**
	 * Gets a miape header from the DB using the webservice
	 * 
	 * @param idMiapeGI
	 * @param userName
	 * @param password
	 * @return the {@link MiapeDocument} object or null of something is wrong
	 */
	private MiapeDocument getMiapeGI(Integer idMiapeGI, String userName,
			String password) {

		byte[] miapeHeaderBytes;
		try {
			// log.info("Getting MIAPE GI Header id = " + idMiapeGI);
			miapeHeaderBytes = this.miapeAPIWebservice.getMiapeGIHeaderById(
					idMiapeGI, userName, password);
			MiapeHeader miapeHeader = new MiapeHeader(miapeHeaderBytes);
			return miapeHeader.getMiapeDocument();
		} catch (MiapeSecurityException_Exception e) {
			log.info("Error retrieving MIAPE GI: " + e.getMessage());

		} catch (MiapeDatabaseException_Exception e) {

			e.printStackTrace();
		}

		return null;
	}

	/**
	 * Gets a miape header from the DB using the webservice
	 * 
	 * @param idMiapeMS
	 * @param userName
	 * @param password
	 * @return the {@link MiapeDocument} object or null of something is wrong
	 */
	private MiapeDocument getMiapeMS(Integer idMiapeMS, String userName,
			String password) {

		byte[] miapeHeaderBytes;
		try {
			// log.info("Getting MIAPE MS Header id = " + idMiapeMS);
			miapeHeaderBytes = this.miapeAPIWebservice.getMiapeMSHeaderById(
					idMiapeMS, userName, password);
			MiapeHeader miapeHeader = new MiapeHeader(miapeHeaderBytes);
			return miapeHeader.getMiapeDocument();
		} catch (MiapeSecurityException_Exception e) {
			log.info("Error retrieving MIAPE MS: " + e.getMessage());

		} catch (MiapeDatabaseException_Exception e) {

			e.printStackTrace();
		}

		return null;
	}

	/**
	 * Gets a miape header from the DB using the webservice
	 * 
	 * @param idMiapeMSI
	 * @param userName
	 * @param password
	 * @return the {@link MiapeDocument} object or null of something is wrong
	 */
	private MiapeDocument getMiapeMSI(Integer idMiapeMSI, String userName,
			String password) {

		byte[] miapeHeaderBytes;
		try {
			// log.info("Getting MIAPE MSI Header id = " + idMiapeMSI);
			miapeHeaderBytes = this.miapeAPIWebservice.getMiapeMSIHeaderById(
					idMiapeMSI, userName, password);
			MiapeHeader miapeHeader = new MiapeHeader(miapeHeaderBytes);
			return miapeHeader.getMiapeDocument();
		} catch (MiapeSecurityException_Exception e) {
			log.info("Error retrieving MIAPE MSI: " + e.getMessage());

		} catch (MiapeDatabaseException_Exception e) {
			e.printStackTrace();
		}

		return null;
	}

}
