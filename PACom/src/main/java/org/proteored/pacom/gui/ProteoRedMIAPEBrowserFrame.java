package org.proteored.pacom.gui;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.net.URL;
import java.rmi.RemoteException;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.SwingWorker.StateValue;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;

import org.proteored.miapeapi.exceptions.MiapeDatabaseException;
import org.proteored.miapeapi.exceptions.MiapeSecurityException;
import org.proteored.miapeapi.interfaces.MiapeDocument;
import org.proteored.miapeapi.interfaces.MiapeHeader;
import org.proteored.miapeapi.interfaces.Project;
import org.proteored.miapeapi.interfaces.persistence.ProjectFile;
import org.proteored.miapeapi.util.MiapeReportsLinkGenerator;
import org.proteored.miapeapi.webservice.clients.miapeapi.MiapeAPIWebserviceDelegate;
import org.proteored.miapeapi.webservice.clients.miapeapi.MiapeDatabaseException_Exception;
import org.proteored.miapeapi.webservice.clients.miapeapi.MiapeSecurityException_Exception;
import org.proteored.miapeapi.webservice.clients.miapeextractor.MiapeExtractorDelegate;
import org.proteored.miapeapi.xml.miapeproject.ProjectImpl;
import org.proteored.miapeapi.xml.miapeproject.autogenerated.MIAPEProject;
import org.proteored.pacom.analysis.gui.components.ExtendedJTree;
import org.proteored.pacom.analysis.gui.components.MyTreeRenderer;
import org.proteored.pacom.gui.tasks.MiapeDeleterTask;
import org.proteored.pacom.gui.tasks.MiapeExtractionTask;
import org.proteored.pacom.gui.tasks.MiapeHeaderLoaderTask;
import org.proteored.pacom.gui.tasks.TreeLoaderTask;
import org.proteored.pacom.gui.tasks.WebservicesLoaderTask;
import org.proteored.pacom.utils.HttpUtilities;

import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;

public class ProteoRedMIAPEBrowserFrame extends javax.swing.JFrame implements
		PropertyChangeListener {
	private final MainFrame mainFrame;
	private static org.apache.log4j.Logger log = org.apache.log4j.Logger
			.getLogger("log4j.logger.org.proteored");
	private static ProteoRedMIAPEBrowserFrame instance;
	private final String MIAPE_ID_REGEXP = "MIAPE\\s\\w+\\s(\\d+).*";
	private final String PROJECT_ID_REGEXP = "(\\d+):\\s(\\w+)";

	public static void main(String[] args) {
		ProteoRedMIAPEBrowserFrame instance = ProteoRedMIAPEBrowserFrame
				.getInstance(null);
		instance.setVisible(true);
	}

	@Override
	public void dispose() {
		if (this.treeLoaderTask != null) {
			while (true) {
				log.info("Waiting for treeLoaderTask closing");
				boolean canceled = this.treeLoaderTask.cancel(true);
				if (canceled
						|| this.treeLoaderTask.getState() != StateValue.STARTED)
					break;
			}

		}
		if (this.mainFrame != null) {
			this.mainFrame.setEnabled(true);
			this.mainFrame.setVisible(true);
		}
		super.dispose();
	}

	public String getUserName() {
		return userName;
	}

	public String getPassword() {
		return password;
	}

	public final MiapeExtractorDelegate miapeExtractorWebservice;

	public MiapeExtractorDelegate getMiapeExtractorWebservice() {
		return miapeExtractorWebservice;
	}

	public final MiapeAPIWebserviceDelegate miapeAPIWebservice;
	private String userName;
	private String password;

	public TreeLoaderTask treeLoaderTask;
	private MiapeHeaderLoaderTask miapeHeaderLoaderTask;

	/** Creates new form MIAPE2PRIDE */
	private ProteoRedMIAPEBrowserFrame(MainFrame mainFrame) {

		// super(mainFrame, modal);
		try {
			UIManager.setLookAndFeel(new WindowsLookAndFeel());
		} catch (UnsupportedLookAndFeelException e) {
		}
		initComponents();
		this.mainFrame = mainFrame;
		this.miapeAPIWebservice = WebservicesLoaderTask.getInstace()
				.getMiapeAPIWebservice(true);
		this.miapeExtractorWebservice = WebservicesLoaderTask.getInstace()
				.getMiapeExtractorWebservice(true);
		if (mainFrame != null) {
			this.userName = mainFrame.userName;
			this.password = mainFrame.password;
			this.mainFrame.setEnabled(false);
			this.mainFrame.setVisible(false);
			// autoscroll in the status field
			// this.autoScroll(jScrollPane3, jTextAreaStatus);
		}
		cleanTree();

		fillTrees();

		loadIcons();

		// set renderer to jtrees to show MIAPE Icons
		this.jTree_MiapeMS.setCellRenderer(new MyTreeRenderer());
		this.jTree_MiapeMSI.setCellRenderer(new MyTreeRenderer());
	}

	public static ProteoRedMIAPEBrowserFrame getInstance(MainFrame mainFrame) {
		if (instance == null)
			instance = new ProteoRedMIAPEBrowserFrame(mainFrame);
		return instance;
	}

	private void loadIcons() {
		// load Icons
		this.setIconImage(ImageManager.getImageIcon(
				ImageManager.PROTEORED_MIAPE_API).getImage());

		this.jButtonDeleteProjectOrDocument.setIcon(ImageManager
				.getImageIcon(ImageManager.DELETE));
		this.jButtonDeleteProjectOrDocument.setPressedIcon(ImageManager
				.getImageIcon(ImageManager.DELETE_CLICKED));
		this.jButtonLoadTrees.setIcon(ImageManager
				.getImageIcon(ImageManager.RELOAD));
		this.jButtonLoadTrees.setPressedIcon(ImageManager
				.getImageIcon(ImageManager.RELOAD_CLICKED));
		this.jButtonStopLoadTree.setIcon(ImageManager
				.getImageIcon(ImageManager.STOP));
		this.jButtonStopLoadTree.setPressedIcon(ImageManager
				.getImageIcon(ImageManager.STOP_CLICKED));
		this.jButtonClearStatus.setIcon(ImageManager
				.getImageIcon(ImageManager.CLEAR));
		this.jButtonClearStatus.setPressedIcon(ImageManager
				.getImageIcon(ImageManager.CLEAR_CLICKED));

		this.jButtonShowReport1.setIcon(ImageManager
				.getImageIcon(ImageManager.DOC));

		this.jButtonShowReport2.setIcon(ImageManager
				.getImageIcon(ImageManager.DOC));

	}

	private void fillTrees() {

		if (this.treeLoaderTask != null)
			this.treeLoaderTask.cancel(true);
		this.treeLoaderTask = new TreeLoaderTask(this.jTree_MiapeMS,
				this.jTree_MiapeMSI, this.jTree_MiapeGE, this.jTree_MiapeGI,
				this.getUserName(), this.getPassword());
		this.treeLoaderTask.addPropertyChangeListener(this);
		this.treeLoaderTask.execute();
		this.jButtonStopLoadTree.setEnabled(true);
		updateProjectAndDocumentManagement();

	}

	private void disableLabelsAndTextFieldsMS(boolean b) {
		// labels
		this.jLabelMIAPEMSName.setEnabled(b);
		this.jLabelVersionMS.setEnabled(b);
		this.jLabelModificationDateMS.setEnabled(b);
		this.jLabelMSTitle.setEnabled(b);
		this.jLabelMIAPEMSID.setEnabled(b);
		this.jLabelMIAPEMSName.setEnabled(b);
		this.jLabelProjectMSID.setEnabled(b);
		this.jLabelProjectMSName.setEnabled(b);

		// text fields
		this.jTextFieldMIAPEMSName.setEnabled(b);
		this.jTextFieldVersionMS.setEnabled(b);
		this.jTextFieldModificationDateMS.setEnabled(b);
		this.jTextFieldMIAPEMSID.setEnabled(b);
		this.jTextFieldProjectMSID.setEnabled(b);
		this.jTextFieldProjectMSName.setEnabled(b);
		// button
		this.jButtonShowReport1.setEnabled(b);
	}

	private void disableLabelsAndTextFieldsMSI(boolean b) {
		// labels
		this.jLabelMIAPEMSIName.setEnabled(b);
		this.jLabelVersionMSI.setEnabled(b);
		this.jLabelModificationDateMSI.setEnabled(b);
		this.jLabelMSITitle.setEnabled(b);
		this.jLabelMIAPEMSIID.setEnabled(b);
		this.jLabelMIAPEMSIName.setEnabled(b);
		this.jLabelProjectMSIID.setEnabled(b);
		this.jLabelProjectMSIName.setEnabled(b);

		// text fields
		this.jTextFieldMIAPEMSIName.setEnabled(b);
		this.jTextFieldVersionMSI.setEnabled(b);
		this.jTextFieldModificationDateMSI.setEnabled(b);
		this.jTextFieldMIAPEMSIID.setEnabled(b);
		this.jTextFieldProjectMSIID.setEnabled(b);
		this.jTextFieldProjectMSIName.setEnabled(b);

		// button
		this.jButtonShowReport2.setEnabled(b);
	}

	public void disableControls(boolean b) {
		log.info("Setting interactions to " + b);
		// labels and textfields
		// this.disableLabelsAndTextFieldsMS(b);
		// this.disableLabelsAndTextFieldsMSI(b);

		// // trees
		// this.jTree_MiapeMS.setEnabled(b);
		// this.jTree_MiapeMSI.setEnabled(b);

		// cursor

		// delete button
		updateProjectAndDocumentManagement();
	}

	public void cleanTree() {
		DefaultMutableTreeNode nodoRaiz = new DefaultMutableTreeNode(
				"No projects found");
		DefaultTreeModel modeloArbol = new DefaultTreeModel(nodoRaiz);
		this.jTree_MiapeMSI.setModel(modeloArbol);
		this.jTree_MiapeMS.setModel(modeloArbol);
	}

	public String getStringFromJTreeSelection(JTree tree) {
		if (((ExtendedJTree) tree).getSelectionCount() > 0) {
			final String stringItem = ((ExtendedJTree) tree).getSelectionPath()
					.getLastPathComponent().toString();
			String REGEX = "(MIAPE\\s\\w+)\\s(\\d+)\\s'(.*)'";
			Pattern p = Pattern.compile(REGEX);
			Matcher m;

			m = p.matcher(stringItem);
			if (m.find()) {
				return "<html>(ID:" + m.group(2) + ") " + m.group(1) + ": <b>"
						+ m.group(3) + "</b></html>";
			} else {
				REGEX = "(\\d+):\\s(.*)";
				p = Pattern.compile(REGEX);
				m = p.matcher(stringItem);
				if (m.find()) {
					return "<html>(ID:" + m.group(1) + ") Project: <b>"
							+ m.group(2) + "</b></html>";
				}
			}
			return stringItem;
		}
		return null;
	}

	// GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jPanel1 = new javax.swing.JPanel();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenu1 = new javax.swing.JMenu();
		jMenu2 = new javax.swing.JMenu();
		jPanelInfo = new javax.swing.JPanel();
		jLabelMSTitle = new javax.swing.JLabel();
		jLabelMIAPEMSName = new javax.swing.JLabel();
		jTextFieldMIAPEMSName = new javax.swing.JTextField();
		jLabelVersionMS = new javax.swing.JLabel();
		jTextFieldVersionMS = new javax.swing.JTextField();
		jLabelModificationDateMS = new javax.swing.JLabel();
		jTextFieldModificationDateMS = new javax.swing.JTextField();
		jLabelMIAPEMSIName = new javax.swing.JLabel();
		jTextFieldMIAPEMSIName = new javax.swing.JTextField();
		jLabelModificationDateMSI = new javax.swing.JLabel();
		jTextFieldModificationDateMSI = new javax.swing.JTextField();
		jLabelMIAPEMSID = new javax.swing.JLabel();
		jTextFieldMIAPEMSID = new javax.swing.JTextField();
		jLabelProjectMSName = new javax.swing.JLabel();
		jTextFieldProjectMSName = new javax.swing.JTextField();
		jLabelProjectMSID = new javax.swing.JLabel();
		jTextFieldProjectMSID = new javax.swing.JTextField();
		jLabelMSITitle = new javax.swing.JLabel();
		jLabelMIAPEMSIID = new javax.swing.JLabel();
		jTextFieldMIAPEMSIID = new javax.swing.JTextField();
		jLabelProjectMSIID = new javax.swing.JLabel();
		jTextFieldProjectMSIID = new javax.swing.JTextField();
		jLabelVersionMSI = new javax.swing.JLabel();
		jTextFieldVersionMSI = new javax.swing.JTextField();
		jLabelProjectMSIName = new javax.swing.JLabel();
		jTextFieldProjectMSIName = new javax.swing.JTextField();
		jButtonShowReport1 = new javax.swing.JButton();
		jButtonShowReport2 = new javax.swing.JButton();
		jPanelStatus = new javax.swing.JPanel();
		jProgressBar_translation = new javax.swing.JProgressBar();
		jScrollPane3 = new javax.swing.JScrollPane();
		jTextAreaStatus = new javax.swing.JTextArea();
		jButtonClearStatus = new javax.swing.JButton();
		jPanelNumbers = new javax.swing.JPanel();
		jLabel2 = new javax.swing.JLabel();
		jLabel1 = new javax.swing.JLabel();
		jLabelMSDocumentsLoaded = new javax.swing.JLabel();
		jLabelMSIDocumentsLoaded = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabelGEDocumentsLoaded = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabelGIDocumentsLoaded = new javax.swing.JLabel();
		jPanel5 = new javax.swing.JPanel();
		jButtonLoadTrees = new javax.swing.JButton();
		jButtonStopLoadTree = new javax.swing.JButton();
		jPanelDelete = new javax.swing.JPanel();
		jButtonDeleteProjectOrDocument = new javax.swing.JButton();
		jLabelProjectOrDocument = new javax.swing.JLabel();
		jTabbedPane1 = new javax.swing.JTabbedPane();
		jPanelMS_MSI = new javax.swing.JPanel();
		jPanel_MS = new javax.swing.JPanel();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTree_MiapeMS = new ExtendedJTree();
		jPanel_MSI = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTree_MiapeMSI = new ExtendedJTree();
		jPanelGE_GI = new javax.swing.JPanel();
		jPanel_GE = new javax.swing.JPanel();
		jScrollPane4 = new javax.swing.JScrollPane();
		jTree_MiapeGE = new ExtendedJTree();
		jPanel_MSI1 = new javax.swing.JPanel();
		jScrollPane5 = new javax.swing.JScrollPane();
		jTree_MiapeGI = new ExtendedJTree();

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 100,
				Short.MAX_VALUE));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 100,
				Short.MAX_VALUE));

		jMenu1.setText("File");
		jMenuBar1.add(jMenu1);

		jMenu2.setText("Edit");
		jMenuBar1.add(jMenu2);

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("MIAPE Extractor - ProteoRed MIAPE Browser");
		setResizable(false);

		jPanelInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

		jLabelMSTitle.setText("Selected MIAPE MS document:");

		jLabelMIAPEMSName.setText("Document Name");

		jTextFieldMIAPEMSName.setEditable(false);
		jTextFieldMIAPEMSName.setToolTipText("MIAPE document name");

		jLabelVersionMS.setText("Version");

		jTextFieldVersionMS.setEditable(false);
		jTextFieldVersionMS.setToolTipText("Version");

		jLabelModificationDateMS.setText("Modification date");

		jTextFieldModificationDateMS.setEditable(false);
		jTextFieldModificationDateMS.setToolTipText("Last modification date");

		jLabelMIAPEMSIName.setText("Document Name");

		jTextFieldMIAPEMSIName.setEditable(false);
		jTextFieldMIAPEMSIName.setToolTipText("MIAPE MS document name");

		jLabelModificationDateMSI.setText("Modification date");

		jTextFieldModificationDateMSI.setEditable(false);
		jTextFieldModificationDateMSI.setToolTipText("Last modification date");

		jLabelMIAPEMSID.setText("ID");

		jTextFieldMIAPEMSID.setEditable(false);
		jTextFieldMIAPEMSID
				.setToolTipText("Identifier of the document in the repository");

		jLabelProjectMSName.setText("Project Name");

		jTextFieldProjectMSName.setEditable(false);
		jTextFieldProjectMSName.setToolTipText("Project name");

		jLabelProjectMSID.setText("Project ID");

		jTextFieldProjectMSID.setEditable(false);
		jTextFieldProjectMSID
				.setToolTipText("Identifier of the project in the repository");

		jLabelMSITitle.setText("Selected MIAPE MSI document:");

		jLabelMIAPEMSIID.setText("ID");

		jTextFieldMIAPEMSIID.setEditable(false);
		jTextFieldMIAPEMSIID
				.setToolTipText("Identifier of the document in the repository");

		jLabelProjectMSIID.setText("Project ID");

		jTextFieldProjectMSIID.setEditable(false);
		jTextFieldProjectMSIID
				.setToolTipText("Identifier of the project in the repository");

		jLabelVersionMSI.setText("Version");

		jTextFieldVersionMSI.setEditable(false);
		jTextFieldVersionMSI.setToolTipText("Version");

		jLabelProjectMSIName.setText("Project Name");

		jTextFieldProjectMSIName.setEditable(false);
		jTextFieldProjectMSIName.setToolTipText("Project name");

		jButtonShowReport1
				.setIcon(new javax.swing.ImageIcon(
						"C:\\Users\\Salva\\workspace\\miape-extractor\\src\\main\\resources\\report.png")); // NOI18N
		jButtonShowReport1.setText("report");
		jButtonShowReport1.setToolTipText("Show MIAPE report in browser");
		jButtonShowReport1
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jButtonShowReport1ActionPerformed(evt);
					}
				});

		jButtonShowReport2
				.setIcon(new javax.swing.ImageIcon(
						"C:\\Users\\Salva\\workspace\\miape-extractor\\src\\main\\resources\\report.png")); // NOI18N
		jButtonShowReport2.setText("report");
		jButtonShowReport2.setToolTipText("Show MIAPE report in browser");
		jButtonShowReport2
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jButtonShowReport2ActionPerformed(evt);
					}
				});

		javax.swing.GroupLayout jPanelInfoLayout = new javax.swing.GroupLayout(
				jPanelInfo);
		jPanelInfo.setLayout(jPanelInfoLayout);
		jPanelInfoLayout
				.setHorizontalGroup(jPanelInfoLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelInfoLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jLabelMSITitle)
														.addComponent(
																jLabelMSTitle)
														.addGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																jPanelInfoLayout
																		.createSequentialGroup()
																		.addGroup(
																				jPanelInfoLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																						.addGroup(
																								javax.swing.GroupLayout.Alignment.LEADING,
																								jPanelInfoLayout
																										.createSequentialGroup()
																										.addGroup(
																												jPanelInfoLayout
																														.createParallelGroup(
																																javax.swing.GroupLayout.Alignment.TRAILING)
																														.addComponent(
																																jLabelMIAPEMSIName)
																														.addComponent(
																																jLabelModificationDateMSI))
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																										.addGroup(
																												jPanelInfoLayout
																														.createParallelGroup(
																																javax.swing.GroupLayout.Alignment.LEADING)
																														.addGroup(
																																jPanelInfoLayout
																																		.createSequentialGroup()
																																		.addComponent(
																																				jTextFieldModificationDateMSI,
																																				javax.swing.GroupLayout.PREFERRED_SIZE,
																																				167,
																																				javax.swing.GroupLayout.PREFERRED_SIZE)
																																		.addPreferredGap(
																																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																		.addComponent(
																																				jLabelVersionMSI)
																																		.addPreferredGap(
																																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																		.addComponent(
																																				jTextFieldVersionMSI,
																																				javax.swing.GroupLayout.DEFAULT_SIZE,
																																				51,
																																				Short.MAX_VALUE))
																														.addComponent(
																																jTextFieldMIAPEMSIName,
																																javax.swing.GroupLayout.DEFAULT_SIZE,
																																267,
																																Short.MAX_VALUE)))
																						.addGroup(
																								javax.swing.GroupLayout.Alignment.LEADING,
																								jPanelInfoLayout
																										.createSequentialGroup()
																										.addGap(22,
																												22,
																												22)
																										.addGroup(
																												jPanelInfoLayout
																														.createParallelGroup(
																																javax.swing.GroupLayout.Alignment.TRAILING)
																														.addComponent(
																																jLabelProjectMSIName)
																														.addComponent(
																																jLabelMIAPEMSIID))
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																										.addGroup(
																												jPanelInfoLayout
																														.createParallelGroup(
																																javax.swing.GroupLayout.Alignment.LEADING)
																														.addGroup(
																																jPanelInfoLayout
																																		.createSequentialGroup()
																																		.addComponent(
																																				jTextFieldMIAPEMSIID,
																																				javax.swing.GroupLayout.PREFERRED_SIZE,
																																				47,
																																				javax.swing.GroupLayout.PREFERRED_SIZE)
																																		.addPreferredGap(
																																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																		.addComponent(
																																				jLabelProjectMSIID)
																																		.addPreferredGap(
																																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																		.addComponent(
																																				jTextFieldProjectMSIID,
																																				javax.swing.GroupLayout.PREFERRED_SIZE,
																																				48,
																																				javax.swing.GroupLayout.PREFERRED_SIZE)
																																		.addPreferredGap(
																																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																																				26,
																																				Short.MAX_VALUE)
																																		.addComponent(
																																				jButtonShowReport2))
																														.addComponent(
																																jTextFieldProjectMSIName,
																																javax.swing.GroupLayout.DEFAULT_SIZE,
																																267,
																																Short.MAX_VALUE)))
																						.addGroup(
																								javax.swing.GroupLayout.Alignment.LEADING,
																								jPanelInfoLayout
																										.createParallelGroup(
																												javax.swing.GroupLayout.Alignment.TRAILING,
																												false)
																										.addGroup(
																												javax.swing.GroupLayout.Alignment.LEADING,
																												jPanelInfoLayout
																														.createSequentialGroup()
																														.addComponent(
																																jLabelModificationDateMS)
																														.addPreferredGap(
																																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																														.addComponent(
																																jTextFieldModificationDateMS,
																																javax.swing.GroupLayout.PREFERRED_SIZE,
																																170,
																																javax.swing.GroupLayout.PREFERRED_SIZE)
																														.addPreferredGap(
																																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																														.addComponent(
																																jLabelVersionMS)
																														.addPreferredGap(
																																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																														.addComponent(
																																jTextFieldVersionMS,
																																javax.swing.GroupLayout.DEFAULT_SIZE,
																																48,
																																Short.MAX_VALUE))
																										.addGroup(
																												javax.swing.GroupLayout.Alignment.LEADING,
																												jPanelInfoLayout
																														.createSequentialGroup()
																														.addGap(3,
																																3,
																																3)
																														.addGroup(
																																jPanelInfoLayout
																																		.createParallelGroup(
																																				javax.swing.GroupLayout.Alignment.TRAILING)
																																		.addComponent(
																																				jLabelMIAPEMSID)
																																		.addComponent(
																																				jLabelProjectMSName)
																																		.addComponent(
																																				jLabelMIAPEMSName))
																														.addPreferredGap(
																																javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																														.addGroup(
																																jPanelInfoLayout
																																		.createParallelGroup(
																																				javax.swing.GroupLayout.Alignment.LEADING)
																																		.addGroup(
																																				jPanelInfoLayout
																																						.createSequentialGroup()
																																						.addComponent(
																																								jTextFieldMIAPEMSID,
																																								javax.swing.GroupLayout.PREFERRED_SIZE,
																																								47,
																																								javax.swing.GroupLayout.PREFERRED_SIZE)
																																						.addPreferredGap(
																																								javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																						.addComponent(
																																								jLabelProjectMSID)
																																						.addPreferredGap(
																																								javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																																						.addComponent(
																																								jTextFieldProjectMSID,
																																								javax.swing.GroupLayout.PREFERRED_SIZE,
																																								48,
																																								javax.swing.GroupLayout.PREFERRED_SIZE)
																																						.addPreferredGap(
																																								javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																																								26,
																																								Short.MAX_VALUE)
																																						.addComponent(
																																								jButtonShowReport1))
																																		.addComponent(
																																				jTextFieldProjectMSName,
																																				javax.swing.GroupLayout.DEFAULT_SIZE,
																																				267,
																																				Short.MAX_VALUE)
																																		.addComponent(
																																				jTextFieldMIAPEMSName,
																																				javax.swing.GroupLayout.DEFAULT_SIZE,
																																				267,
																																				Short.MAX_VALUE)))))
																		.addGap(450,
																				450,
																				450)))
										.addContainerGap()));
		jPanelInfoLayout
				.setVerticalGroup(jPanelInfoLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelInfoLayout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(jLabelMSTitle)
										.addGap(7, 7, 7)
										.addGroup(
												jPanelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelMIAPEMSID)
														.addComponent(
																jTextFieldMIAPEMSID,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jLabelProjectMSID)
														.addComponent(
																jTextFieldProjectMSID,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jButtonShowReport1))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelProjectMSName)
														.addComponent(
																jTextFieldProjectMSName,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelMIAPEMSName)
														.addComponent(
																jTextFieldMIAPEMSName,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelModificationDateMS)
														.addComponent(
																jTextFieldModificationDateMS,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jLabelVersionMS)
														.addComponent(
																jTextFieldVersionMS,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jLabelMSITitle)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jTextFieldMIAPEMSIID,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jLabelMIAPEMSIID)
														.addComponent(
																jLabelProjectMSIID)
														.addComponent(
																jTextFieldProjectMSIID,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jButtonShowReport2))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelProjectMSIName)
														.addComponent(
																jTextFieldProjectMSIName,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelMIAPEMSIName)
														.addComponent(
																jTextFieldMIAPEMSIName,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelInfoLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelModificationDateMSI)
														.addComponent(
																jTextFieldModificationDateMSI,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jLabelVersionMSI)
														.addComponent(
																jTextFieldVersionMSI,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap(31, Short.MAX_VALUE)));

		jPanelStatus.setBorder(javax.swing.BorderFactory.createTitledBorder(
				javax.swing.BorderFactory.createEtchedBorder(), "Status"));

		jProgressBar_translation.setStringPainted(true);

		jScrollPane3
				.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		jScrollPane3.setFont(new java.awt.Font("Dialog", 0, 10));

		jTextAreaStatus.setColumns(20);
		jTextAreaStatus.setEditable(false);
		jTextAreaStatus.setFont(new java.awt.Font("Dialog", 0, 10));
		jTextAreaStatus.setLineWrap(true);
		jTextAreaStatus.setRows(5);
		jTextAreaStatus.setToolTipText("Task status");
		jTextAreaStatus.setWrapStyleWord(true);
		jScrollPane3.setViewportView(jTextAreaStatus);

		jButtonClearStatus
				.setIcon(new javax.swing.ImageIcon(
						"C:\\Users\\Salva\\workspace\\miape-extractor\\src\\main\\resources\\clear.png")); // NOI18N
		jButtonClearStatus.setText("Clear status");
		jButtonClearStatus.setToolTipText("Clear the status panel");
		jButtonClearStatus
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jButtonClearStatusActionPerformed(evt);
					}
				});

		javax.swing.GroupLayout jPanelStatusLayout = new javax.swing.GroupLayout(
				jPanelStatus);
		jPanelStatus.setLayout(jPanelStatusLayout);
		jPanelStatusLayout
				.setHorizontalGroup(jPanelStatusLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelStatusLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanelStatusLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jScrollPane3,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																419,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGroup(
																jPanelStatusLayout
																		.createSequentialGroup()
																		.addComponent(
																				jButtonClearStatus)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				jProgressBar_translation,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				305,
																				Short.MAX_VALUE)))
										.addContainerGap()));
		jPanelStatusLayout
				.setVerticalGroup(jPanelStatusLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanelStatusLayout
										.createSequentialGroup()
										.addComponent(
												jScrollPane3,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelStatusLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(
																jButtonClearStatus)
														.addComponent(
																jProgressBar_translation,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		jPanelNumbers.setBorder(javax.swing.BorderFactory.createTitledBorder(
				javax.swing.BorderFactory.createEtchedBorder(),
				"Documents loaded"));

		jLabel2.setText("MIAPE MSI docs:");

		jLabel1.setText("MIAPE MS docs:");

		jLabelMSDocumentsLoaded.setText("0");

		jLabelMSIDocumentsLoaded.setText("0");

		jLabel3.setText("MIAPE GE docs:");

		jLabelGEDocumentsLoaded.setText("0");

		jLabel4.setText("MIAPE GI docs:");

		jLabelGIDocumentsLoaded.setText("0");

		javax.swing.GroupLayout jPanelNumbersLayout = new javax.swing.GroupLayout(
				jPanelNumbers);
		jPanelNumbers.setLayout(jPanelNumbersLayout);
		jPanelNumbersLayout
				.setHorizontalGroup(jPanelNumbersLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanelNumbersLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanelNumbersLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addGroup(
																javax.swing.GroupLayout.Alignment.LEADING,
																jPanelNumbersLayout
																		.createSequentialGroup()
																		.addGroup(
																				jPanelNumbersLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								jLabel3)
																						.addComponent(
																								jLabel4))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				jPanelNumbersLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								jLabelGIDocumentsLoaded,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								40,
																								Short.MAX_VALUE)
																						.addComponent(
																								jLabelGEDocumentsLoaded,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								40,
																								Short.MAX_VALUE)))
														.addGroup(
																jPanelNumbersLayout
																		.createSequentialGroup()
																		.addGroup(
																				jPanelNumbersLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								jLabel1)
																						.addComponent(
																								jLabel2))
																		.addGap(4,
																				4,
																				4)
																		.addGroup(
																				jPanelNumbersLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING,
																								false)
																						.addComponent(
																								jLabelMSIDocumentsLoaded,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								jLabelMSDocumentsLoaded,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								37,
																								Short.MAX_VALUE))))
										.addContainerGap()));
		jPanelNumbersLayout
				.setVerticalGroup(jPanelNumbersLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelNumbersLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanelNumbersLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel1)
														.addComponent(
																jLabelMSDocumentsLoaded))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelNumbersLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel2)
														.addComponent(
																jLabelMSIDocumentsLoaded))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelNumbersLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel3)
														.addComponent(
																jLabelGEDocumentsLoaded))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelNumbersLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel4)
														.addComponent(
																jLabelGIDocumentsLoaded))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(
				javax.swing.BorderFactory.createEtchedBorder(), "Reload"));

		jButtonLoadTrees
				.setIcon(new javax.swing.ImageIcon(
						"C:\\Users\\Salva\\workspace\\miape-extractor\\src\\main\\resources\\reload.png")); // NOI18N
		jButtonLoadTrees.setText("Reload MIAPE trees");
		jButtonLoadTrees
				.setToolTipText("Clears MIAPE trees and starts downloading again");
		jButtonLoadTrees.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButtonLoadTreesActionPerformed(evt);
			}
		});

		jButtonStopLoadTree
				.setIcon(new javax.swing.ImageIcon(
						"C:\\Users\\Salva\\workspace\\miape-extractor\\src\\main\\resources\\stop.png")); // NOI18N
		jButtonStopLoadTree.setText("Stop loading MIAPE trees");
		jButtonStopLoadTree.setToolTipText("Stop loading MIAPE trees");
		jButtonStopLoadTree.setEnabled(false);
		jButtonStopLoadTree
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jButtonStopLoadTreeActionPerformed(evt);
					}
				});

		javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(
				jPanel5);
		jPanel5.setLayout(jPanel5Layout);
		jPanel5Layout
				.setHorizontalGroup(jPanel5Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel5Layout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(jButtonStopLoadTree)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jButtonLoadTrees)
										.addContainerGap(108, Short.MAX_VALUE)));
		jPanel5Layout
				.setVerticalGroup(jPanel5Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel5Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel5Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jButtonStopLoadTree)
														.addComponent(
																jButtonLoadTrees))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		jPanelDelete.setBorder(javax.swing.BorderFactory.createTitledBorder(
				javax.swing.BorderFactory.createEtchedBorder(),
				"Delete from repository"));

		jButtonDeleteProjectOrDocument
				.setIcon(new javax.swing.ImageIcon(
						"C:\\Users\\Salva\\workspace\\miape-extractor\\src\\main\\resources\\delete.png")); // NOI18N
		jButtonDeleteProjectOrDocument.setText("Delete selected item");
		jButtonDeleteProjectOrDocument.setToolTipText("Delete ");
		jButtonDeleteProjectOrDocument
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jButtonDeleteProjectOrDocumentActionPerformed(evt);
					}
				});

		jLabelProjectOrDocument.setAutoscrolls(true);
		jLabelProjectOrDocument
				.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

		javax.swing.GroupLayout jPanelDeleteLayout = new javax.swing.GroupLayout(
				jPanelDelete);
		jPanelDelete.setLayout(jPanelDeleteLayout);
		jPanelDeleteLayout
				.setHorizontalGroup(jPanelDeleteLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelDeleteLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanelDeleteLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jLabelProjectOrDocument,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																242,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jButtonDeleteProjectOrDocument))
										.addContainerGap(38, Short.MAX_VALUE)));
		jPanelDeleteLayout
				.setVerticalGroup(jPanelDeleteLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanelDeleteLayout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												jLabelProjectOrDocument,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												22,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												51, Short.MAX_VALUE)
										.addComponent(
												jButtonDeleteProjectOrDocument)
										.addContainerGap()));

		jPanel_MS.setBorder(javax.swing.BorderFactory
				.createTitledBorder("MIAPE MS documents"));
		jPanel_MS.setToolTipText("MIAPE Mass Spectrometry documents");

		jTree_MiapeMS.setAutoscrolls(true);
		jTree_MiapeMS.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTree_MiapeMSMouseClicked(evt);
			}
		});
		jScrollPane2.setViewportView(jTree_MiapeMS);

		javax.swing.GroupLayout jPanel_MSLayout = new javax.swing.GroupLayout(
				jPanel_MS);
		jPanel_MS.setLayout(jPanel_MSLayout);
		jPanel_MSLayout.setHorizontalGroup(jPanel_MSLayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel_MSLayout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane2,
								javax.swing.GroupLayout.PREFERRED_SIZE, 197,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)));
		jPanel_MSLayout.setVerticalGroup(jPanel_MSLayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel_MSLayout
						.createSequentialGroup()
						.addComponent(jScrollPane2,
								javax.swing.GroupLayout.DEFAULT_SIZE, 464,
								Short.MAX_VALUE).addContainerGap()));

		jPanel_MSI.setBorder(javax.swing.BorderFactory
				.createTitledBorder("MIAPE MSI documents"));
		jPanel_MSI
				.setToolTipText("MIAPE Mass Spectrometry Informatics documents");

		jTree_MiapeMSI.setAutoscrolls(true);
		jTree_MiapeMSI.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTree_MiapeMSIMouseClicked(evt);
			}
		});
		jScrollPane1.setViewportView(jTree_MiapeMSI);

		javax.swing.GroupLayout jPanel_MSILayout = new javax.swing.GroupLayout(
				jPanel_MSI);
		jPanel_MSI.setLayout(jPanel_MSILayout);
		jPanel_MSILayout.setHorizontalGroup(jPanel_MSILayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel_MSILayout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										197,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));
		jPanel_MSILayout.setVerticalGroup(jPanel_MSILayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel_MSILayout
						.createSequentialGroup()
						.addComponent(jScrollPane1,
								javax.swing.GroupLayout.DEFAULT_SIZE, 464,
								Short.MAX_VALUE).addContainerGap()));

		javax.swing.GroupLayout jPanelMS_MSILayout = new javax.swing.GroupLayout(
				jPanelMS_MSI);
		jPanelMS_MSI.setLayout(jPanelMS_MSILayout);
		jPanelMS_MSILayout
				.setHorizontalGroup(jPanelMS_MSILayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelMS_MSILayout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												jPanel_MS,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jPanel_MSI,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(29, Short.MAX_VALUE)));
		jPanelMS_MSILayout
				.setVerticalGroup(jPanelMS_MSILayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanelMS_MSILayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanelMS_MSILayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(
																jPanel_MS,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addComponent(
																jPanel_MSI,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE))
										.addContainerGap()));

		jTabbedPane1.addTab("MIAPE MS and MSIs", jPanelMS_MSI);

		jPanel_GE.setBorder(javax.swing.BorderFactory
				.createTitledBorder("MIAPE GE documents"));
		jPanel_GE.setToolTipText("MIAPE Mass Spectrometry documents");

		jTree_MiapeGE.setAutoscrolls(true);
		jTree_MiapeGE.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTree_MiapeGEMouseClicked(evt);
			}
		});
		jScrollPane4.setViewportView(jTree_MiapeGE);

		javax.swing.GroupLayout jPanel_GELayout = new javax.swing.GroupLayout(
				jPanel_GE);
		jPanel_GE.setLayout(jPanel_GELayout);
		jPanel_GELayout.setHorizontalGroup(jPanel_GELayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel_GELayout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane4,
								javax.swing.GroupLayout.PREFERRED_SIZE, 195,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(21, Short.MAX_VALUE)));
		jPanel_GELayout.setVerticalGroup(jPanel_GELayout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel_GELayout
						.createSequentialGroup()
						.addComponent(jScrollPane4,
								javax.swing.GroupLayout.DEFAULT_SIZE, 464,
								Short.MAX_VALUE).addContainerGap()));

		jPanel_MSI1.setBorder(javax.swing.BorderFactory
				.createTitledBorder("MIAPE GI documents"));
		jPanel_MSI1
				.setToolTipText("MIAPE Mass Spectrometry Informatics documents");

		jTree_MiapeGI.setAutoscrolls(true);
		jTree_MiapeGI.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTree_MiapeGIMouseClicked(evt);
			}
		});
		jScrollPane5.setViewportView(jTree_MiapeGI);

		javax.swing.GroupLayout jPanel_MSI1Layout = new javax.swing.GroupLayout(
				jPanel_MSI1);
		jPanel_MSI1.setLayout(jPanel_MSI1Layout);
		jPanel_MSI1Layout.setHorizontalGroup(jPanel_MSI1Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel_MSI1Layout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(jScrollPane5,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										208, Short.MAX_VALUE)));
		jPanel_MSI1Layout
				.setVerticalGroup(jPanel_MSI1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel_MSI1Layout
										.createSequentialGroup()
										.addComponent(
												jScrollPane5,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												464, Short.MAX_VALUE)
										.addContainerGap()));

		javax.swing.GroupLayout jPanelGE_GILayout = new javax.swing.GroupLayout(
				jPanelGE_GI);
		jPanelGE_GI.setLayout(jPanelGE_GILayout);
		jPanelGE_GILayout
				.setHorizontalGroup(jPanelGE_GILayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelGE_GILayout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												jPanel_GE,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jPanel_MSI1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(23, Short.MAX_VALUE)));
		jPanelGE_GILayout
				.setVerticalGroup(jPanelGE_GILayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanelGE_GILayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanelGE_GILayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(
																jPanel_GE,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addComponent(
																jPanel_MSI1,
																javax.swing.GroupLayout.Alignment.LEADING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE))
										.addContainerGap()));

		jTabbedPane1.addTab("MIAPE GE and GIs", jPanelGE_GI);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jTabbedPane1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														511, Short.MAX_VALUE)
												.addComponent(
														jPanel5,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jPanelNumbers,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		jPanelDelete,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addComponent(jPanelInfo, 0,
														477, Short.MAX_VALUE)
												.addComponent(
														jPanelStatus,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						jPanelDelete,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						Short.MAX_VALUE)
																				.addComponent(
																						jPanelNumbers,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						javax.swing.GroupLayout.PREFERRED_SIZE))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		jPanelInfo,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		jPanelStatus,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jPanel5,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(18, 18,
																		18)
																.addComponent(
																		jTabbedPane1,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		555,
																		Short.MAX_VALUE)))
								.addContainerGap()));

		pack();
		java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit()
				.getScreenSize();
		java.awt.Dimension dialogSize = getSize();
		setLocation((screenSize.width - dialogSize.width) / 2,
				(screenSize.height - dialogSize.height) / 2);
	}// </editor-fold>
		// GEN-END:initComponents

	private void jButtonShowReport1ActionPerformed(
			java.awt.event.ActionEvent evt) {
		int userID = getUserID();
		if (userID > 0) {
			Object[] dialog_options = { "Yes, open browser",
					"No, close this dialog" };

			String miapeType = getMiapeType1();
			int miapeID = getMiapeId1();
			URL directLink = MiapeReportsLinkGenerator.getMiapePublicLink(
					userID, miapeID, miapeType);
			if (directLink != null) {
				int selected_option = JOptionPane.showOptionDialog(this,
						"Click on yes to open a browser to go directly to the MIAPE "
								+ miapeType + " document report." + "\n",
						"Show MIAPE " + miapeType + " report",
						JOptionPane.YES_NO_CANCEL_OPTION,
						JOptionPane.QUESTION_MESSAGE, null, dialog_options,
						dialog_options[1]);
				if (selected_option == 0) { // Yes
					HttpUtilities.openURL(directLink.toString());
				}
			}
		}

	}

	private int getMiapeId1() {
		if (this.jTabbedPane1.getSelectedIndex() == 0) {
			final String stringFromSelection = jTree_MiapeMS
					.getStringFromSelection(MIAPE_ID_REGEXP);
			if (stringFromSelection != null && !"".equals(stringFromSelection)) {
				final int selectedMIAPEMS = Integer
						.valueOf(stringFromSelection);
				if (selectedMIAPEMS > 0)
					return selectedMIAPEMS;
			}
		} else {
			final String stringFromSelection = jTree_MiapeGE
					.getStringFromSelection(MIAPE_ID_REGEXP);
			if (stringFromSelection != null && !"".equals(stringFromSelection)) {
				final int selectedMIAPEGE = Integer
						.valueOf(stringFromSelection);
				if (selectedMIAPEGE > 0)
					return selectedMIAPEGE;
			}
		}
		return -1;
	}

	private int getMiapeId2() {
		if (this.jTabbedPane1.getSelectedIndex() == 0) {
			final String stringFromSelection = jTree_MiapeMSI
					.getStringFromSelection(MIAPE_ID_REGEXP);
			if (stringFromSelection != null && !"".equals(stringFromSelection)) {
				final int selectedMIAPEMSI = Integer
						.valueOf(stringFromSelection);
				if (selectedMIAPEMSI > 0)
					return selectedMIAPEMSI;
			}
		} else {
			final String stringFromSelection = jTree_MiapeGI
					.getStringFromSelection(MIAPE_ID_REGEXP);
			if (stringFromSelection != null && !"".equals(stringFromSelection)) {
				final int selectedMIAPEGI = Integer
						.valueOf(stringFromSelection);
				if (selectedMIAPEGI > 0)
					return selectedMIAPEGI;
			}
		}
		return -1;
	}

	private String getMiapeType1() {
		if (this.jTabbedPane1.getSelectedIndex() == 0) {
			return "MS";
		} else {
			return "GE";
		}
	}

	private String getMiapeType2() {
		if (this.jTabbedPane1.getSelectedIndex() == 0) {
			return "MSI";
		} else {
			return "GI";
		}
	}

	private int getUserID() {
		try {
			return this.miapeAPIWebservice.getUserId(userName, password);
		} catch (MiapeDatabaseException_Exception e) {
			e.printStackTrace();
		} catch (MiapeSecurityException_Exception e) {
			e.printStackTrace();
		}
		return -1;
	}

	private void jButtonShowReport2ActionPerformed(
			java.awt.event.ActionEvent evt) {
		int userID = getUserID();
		if (userID > 0) {
			Object[] dialog_options = { "Yes, open browser",
					"No, close this dialog" };

			String miapeType = getMiapeType2();
			int miapeID = getMiapeId2();
			URL directLink = MiapeReportsLinkGenerator.getMiapePublicLink(
					userID, miapeID, miapeType);
			if (directLink != null) {
				int selected_option = JOptionPane.showOptionDialog(this,
						"Click on yes to open a browser to go directly to the MIAPE "
								+ miapeType + " document report." + "\n",
						"Show MIAPE " + miapeType + " report",
						JOptionPane.YES_NO_CANCEL_OPTION,
						JOptionPane.QUESTION_MESSAGE, null, dialog_options,
						dialog_options[1]);
				if (selected_option == 0) { // Yes
					HttpUtilities.openURL(directLink.toString());
				}
			}
		}
	}

	private void jTree_MiapeGIMouseClicked(java.awt.event.MouseEvent evt) {
		boolean projectDuplicated = false;

		// only if the tree is completely loaded
		if (loadingTaskIsNotRunning()) {
			log.info("no tasks running now");
			final TreePath pathForLocation = this.jTree_MiapeGI
					.getPathForLocation(evt.getX(), evt.getY());
			if (pathForLocation == null)
				this.jTree_MiapeGI.clearSelection();
			projectDuplicated = updateSelectionGI();
		}
		if (!projectDuplicated)
			updateProjectAndDocumentManagement();
	}

	void jTree_MiapeGEMouseClicked(java.awt.event.MouseEvent evt) {
		// only if the tree is completely loaded
		if (loadingTaskIsNotRunning()) {
			// Only if a MIAPE document node is selected
			final TreePath pathForLocation = this.jTree_MiapeGE
					.getPathForLocation(evt.getX(), evt.getY());
			if (pathForLocation == null)
				this.jTree_MiapeGE.clearSelection();
			updateSelectionGE();
		}

		updateProjectAndDocumentManagement();
	}

	private void jButtonStopLoadTreeActionPerformed(
			java.awt.event.ActionEvent evt) {
		if (this.treeLoaderTask != null) {
			boolean canceled = this.treeLoaderTask.cancel(true);
			if (canceled) {
				this.jButtonStopLoadTree.setEnabled(false);
				disableControls(true);
				this.appendStatus("MIAPE loading canceled by user.");
			}
		}
	}

	private void jButtonLoadTreesActionPerformed(java.awt.event.ActionEvent evt) {
		fillTrees();
	}

	private void jButtonDeleteProjectOrDocumentActionPerformed(
			java.awt.event.ActionEvent evt) {

		try {
			deleteItemFromTree();
			updateSelectionMS();
			updateSelectionMSI();
			updateSelectionGE();
			updateSelectionGI();
			updateProjectAndDocumentManagement();
		} catch (MiapeSecurityException_Exception e) {
			e.printStackTrace();
			this.appendStatus("You don't have permissions to delete that item");
		} catch (MiapeDatabaseException_Exception e) {
			e.printStackTrace();
			this.appendStatus("Error deleting item: " + e.getMessage());
		} catch (RemoteException e) {
			e.printStackTrace();
			this.appendStatus("Error deleting item: " + e.getMessage());
		}
		this.disableControls(true);
	}

	private void deleteItemFromTree() throws MiapeSecurityException_Exception,
			MiapeDatabaseException_Exception, RemoteException {
		if (isOnlyOneNodeSelected(3)) {
			int id = getSelectedMIAPEId();

			if (jTree_MiapeMS.isOnlyOneNodeSelected(3)) {
				if (showDeletionWarn("MS", id) != JOptionPane.YES_OPTION)
					return;
				MiapeDeleterTask deleter = new MiapeDeleterTask(
						miapeAPIWebservice, userName, password, id, "MS");
				deleter.addPropertyChangeListener(this);
				deleter.execute();

			} else if (jTree_MiapeMSI.isOnlyOneNodeSelected(3)) {
				if (showDeletionWarn("MSI", id) != JOptionPane.YES_OPTION)
					return;
				MiapeDeleterTask deleter = new MiapeDeleterTask(
						miapeAPIWebservice, userName, password, id, "MSI");
				deleter.addPropertyChangeListener(this);
				deleter.execute();

			} else if (jTree_MiapeGE.isOnlyOneNodeSelected(3)) {
				if (showDeletionWarn("GE", id) != JOptionPane.YES_OPTION)
					return;
				MiapeDeleterTask deleter = new MiapeDeleterTask(
						miapeAPIWebservice, userName, password, id, "GE");
				deleter.addPropertyChangeListener(this);
				deleter.execute();

			} else if (jTree_MiapeGI.isOnlyOneNodeSelected(3)) {
				if (showDeletionWarn("GI", id) != JOptionPane.YES_OPTION)
					return;
				MiapeDeleterTask deleter = new MiapeDeleterTask(
						miapeAPIWebservice, userName, password, id, "GI");
				deleter.addPropertyChangeListener(this);
				deleter.execute();

			}
		} else if (isOneProjectSelected()) {
			int id = getSelectedProjectId();
			if (showDeletionWarn("PROJECT", id) != JOptionPane.YES_OPTION)
				return;
			MiapeDeleterTask deleter = new MiapeDeleterTask(miapeAPIWebservice,
					userName, password, id);
			deleter.addPropertyChangeListener(this);
			deleter.execute();
		}

	}

	private int getSelectedProjectId() {
		int selectedProject = 0;
		final String selectedProjectMS = jTree_MiapeMS
				.getStringFromSelection(PROJECT_ID_REGEXP);
		if (selectedProjectMS != null && !"".equals(selectedProjectMS)) {
			selectedProject = Integer.valueOf(selectedProjectMS);
			if (selectedProject > 0)
				return selectedProject;
		}
		final String selectedProjectMSI = jTree_MiapeMSI
				.getStringFromSelection(PROJECT_ID_REGEXP);
		if (selectedProjectMSI != null && !"".equals(selectedProjectMSI)) {
			selectedProject = Integer.valueOf(selectedProjectMSI);
			if (selectedProject > 0)
				return selectedProject;
		}
		return -1;
	}

	private int getSelectedMIAPEId() {
		final String stringFromSelection = jTree_MiapeMS
				.getStringFromSelection(MIAPE_ID_REGEXP);
		if (stringFromSelection != null && !"".equals(stringFromSelection)) {
			final int selectedMIAPEMS = Integer.valueOf(stringFromSelection);
			if (selectedMIAPEMS > 0)
				return selectedMIAPEMS;
		}
		final String stringFromSelection2 = jTree_MiapeMSI
				.getStringFromSelection(MIAPE_ID_REGEXP);
		if (stringFromSelection2 != null && !"".equals(stringFromSelection2)) {
			final int selectedMIAPEMSI = Integer.valueOf(stringFromSelection2);
			if (selectedMIAPEMSI > 0)
				return selectedMIAPEMSI;
		}
		return -1;
	}

	private boolean isOneProjectSelected() {
		// if there is only one project selected in MS and no in MSI
		if (jTree_MiapeMS.isOnlyOneNodeSelected(2)
				&& !jTree_MiapeMSI.isOnlyOneNodeSelected(2))
			return true;
		// if only one project selected in MSI and no in MS
		if (!jTree_MiapeMS.isOnlyOneNodeSelected(2)
				&& jTree_MiapeMSI.isOnlyOneNodeSelected(2))
			return true;
		// if there is only one selected in MSI and only one in MS and they are
		// the same
		if (jTree_MiapeMS.isOnlyOneNodeSelected(2)
				&& jTree_MiapeMSI.isOnlyOneNodeSelected(2)) {
			if (jTree_MiapeMS.getStringFromSelection(PROJECT_ID_REGEXP).equals(
					jTree_MiapeMSI.getStringFromSelection(PROJECT_ID_REGEXP)))
				return true;
		}
		return false;
	}

	private boolean isOnlyOneNodeSelected(int level) {
		if ((jTree_MiapeMS.isOnlyOneNodeSelected(level) && !jTree_MiapeMSI
				.isOnlyOneNodeSelected(level))
				|| (!jTree_MiapeMS.isOnlyOneNodeSelected(level) && jTree_MiapeMSI
						.isOnlyOneNodeSelected(level)))
			return true;
		return false;
	}

	private int showDeletionWarn(String itemType, int idMIAPE) {
		String cadena = "";
		if (itemType.equals("MS")) {
			cadena = "MIAPE MS document";
		} else if (itemType.equals("MSI")) {
			cadena = "MIAPE MSI document";
		} else if (itemType.equals("PROJECT")) {
			cadena = "MIAPE project";
		}

		return JOptionPane.showConfirmDialog(this,
				"Are you sure you want to delete the " + cadena + " with ID:"
						+ idMIAPE + " from the MIAPE repository?\n",
				"Warning deleting", JOptionPane.YES_NO_CANCEL_OPTION);

	}

	private void jButtonClearStatusActionPerformed(
			java.awt.event.ActionEvent evt) {
		this.jTextAreaStatus.setText("");
	}

	private void jTree_MiapeMSIMouseClicked(java.awt.event.MouseEvent evt) {
		boolean projectDuplicated = false;

		// only if the tree is completely loaded
		// if (loadingTaskIsNotRunning()) {
		log.info("no tasks running now");
		final TreePath pathForLocation = this.jTree_MiapeMSI
				.getPathForLocation(evt.getX(), evt.getY());
		if (pathForLocation == null)
			this.jTree_MiapeMSI.clearSelection();
		projectDuplicated = updateSelectionMSI();
		// }
		if (!projectDuplicated)
			updateProjectAndDocumentManagement();
	}

	private boolean updateSelectionMSI() {
		boolean projectDuplicated = false;
		// Only if a MIAPE document node is selected
		if (!jTree_MiapeMSI.isSelectionEmpty()
				&& this.jTree_MiapeMSI.isOnlyOneNodeSelected(3)) {
			final String miapeSelection = jTree_MiapeMSI
					.getStringFromSelection(MIAPE_ID_REGEXP);

			if (miapeSelection != null && !"".equals(miapeSelection)
					&& Integer.valueOf(miapeSelection) > 0) {

				// if there is other miapeheaderloaderprocess,
				// cancel it
				if (this.miapeHeaderLoaderTask != null) {
					log.info(this.miapeHeaderLoaderTask.getState());
					if (!this.miapeHeaderLoaderTask.isDone())
						this.miapeHeaderLoaderTask.cancel(true);
				}

				// this.jProgressBar_translation.setIndeterminate(true);
				this.miapeHeaderLoaderTask = new MiapeHeaderLoaderTask(
						Integer.valueOf(miapeSelection), "MSI",
						this.miapeAPIWebservice, this.miapeExtractorWebservice,
						this.userName, this.password);
				miapeHeaderLoaderTask.addPropertyChangeListener(this);
				miapeHeaderLoaderTask.execute();

				// this.jProgressBar_translation.setIndeterminate(false);

				// if a project is selected, select the same project in the
				// other tree
			} else {
				final String projectSelection = jTree_MiapeMSI
						.getStringFromSelection(PROJECT_ID_REGEXP);
				if (projectSelection != null && !"".equals(projectSelection)
						&& Integer.valueOf(projectSelection) > 0
						&& jTree_MiapeMSI.isOnlyOneNodeSelected(2)) {

					int intIdProject = Integer.valueOf(projectSelection);
					if (intIdProject > 0) {
						String idProject = intIdProject + ":";
						if (jTree_MiapeMS.scrollToNode(idProject)) {
							enableProjectAndDocumentManagement(true,
									getStringFromJTreeSelection(jTree_MiapeMSI));
							projectDuplicated = true;
						}
					}

				}
			}
		} else {
			this.clearMIAPEInformationMSI();
		}

		if (!projectDuplicated && jTree_MiapeMSI.getSelectionCount() > 0)
			this.jTree_MiapeMS.clearSelection();
		if (this.jTree_MiapeMS.isSelectionEmpty())
			this.clearMIAPEInformationMS();
		return projectDuplicated;
	}

	private boolean updateSelectionGI() {
		boolean projectDuplicated = false;
		// Only if a MIAPE document node is selected
		if (!jTree_MiapeGI.isSelectionEmpty()
				&& this.jTree_MiapeGI.isOnlyOneNodeSelected(3)) {
			final String miapeSelection = jTree_MiapeGI
					.getStringFromSelection(MIAPE_ID_REGEXP);

			if (miapeSelection != null && !"".equals(miapeSelection)
					&& Integer.valueOf(miapeSelection) > 0) {

				// if there is other miapeheaderloaderprocess,
				// cancel it
				if (this.miapeHeaderLoaderTask != null) {
					log.info(this.miapeHeaderLoaderTask.getState());
					if (!this.miapeHeaderLoaderTask.isDone())
						this.miapeHeaderLoaderTask.cancel(true);
				}

				// this.jProgressBar_translation.setIndeterminate(true);
				this.miapeHeaderLoaderTask = new MiapeHeaderLoaderTask(
						Integer.valueOf(miapeSelection), "GI",
						this.miapeAPIWebservice, this.miapeExtractorWebservice,
						this.userName, this.password);
				miapeHeaderLoaderTask.addPropertyChangeListener(this);
				miapeHeaderLoaderTask.execute();

				// this.jProgressBar_translation.setIndeterminate(false);

				// if a project is selected, select the same project in the
				// other tree
			} else {
				final String projectSelection = jTree_MiapeGI
						.getStringFromSelection(PROJECT_ID_REGEXP);
				if (projectSelection != null && !"".equals(projectSelection)
						&& Integer.valueOf(projectSelection) > 0
						&& jTree_MiapeGI.isOnlyOneNodeSelected(2)) {

					int intIdProject = Integer.valueOf(projectSelection);
					if (intIdProject > 0) {
						String idProject = intIdProject + ":";
						if (jTree_MiapeMS.scrollToNode(idProject)) {
							enableProjectAndDocumentManagement(true,
									getStringFromJTreeSelection(jTree_MiapeGI));
							projectDuplicated = true;
						}
					}

				}
			}
		} else {
			this.clearMIAPEInformationMSI();
		}
		return projectDuplicated;
	}

	private void jTree_MiapeMSMouseClicked(java.awt.event.MouseEvent evt) {

		// only if the tree is completely loaded
		if (loadingTaskIsNotRunning()) {
			// Only if a MIAPE document node is selected
			final TreePath pathForLocation = this.jTree_MiapeMS
					.getPathForLocation(evt.getX(), evt.getY());
			if (pathForLocation == null)
				this.jTree_MiapeMS.clearSelection();
			updateSelectionMS();
		}

		updateProjectAndDocumentManagement();
	}

	private boolean updateSelectionMS() {
		boolean projectDuplicated = false;
		if (!jTree_MiapeMS.isSelectionEmpty()
				&& this.jTree_MiapeMS.isOnlyOneNodeSelected(3)) {
			final String stringFromSelection = jTree_MiapeMS
					.getStringFromSelection(MIAPE_ID_REGEXP);
			if (!"".equals(stringFromSelection)
					&& Integer.valueOf(stringFromSelection) > 0) {
				// if there is other miapeheaderloaderprocess,
				// cancel it
				if (this.miapeHeaderLoaderTask != null
						&& this.miapeHeaderLoaderTask.getState().equals(
								StateValue.STARTED))
					this.miapeHeaderLoaderTask.cancel(true);

				// this.jProgressBar_translation.setIndeterminate(true);
				this.miapeHeaderLoaderTask = new MiapeHeaderLoaderTask(
						Integer.valueOf(stringFromSelection), "MS",
						this.miapeAPIWebservice, this.miapeExtractorWebservice,
						this.userName, this.password);
				this.miapeHeaderLoaderTask.addPropertyChangeListener(this);
				this.miapeHeaderLoaderTask.execute();

				// this.jProgressBar_translation.setIndeterminate(false);
				// if a project is selected, select the same project in the
				// other tree
			} else {
				final String stringFromSelection2 = jTree_MiapeMS
						.getStringFromSelection(PROJECT_ID_REGEXP);
				if (!"".equals(stringFromSelection2)
						&& Integer.valueOf(stringFromSelection2) > 0
						&& jTree_MiapeMS.isOnlyOneNodeSelected(2)) {
					int intIdProject = Integer.valueOf(stringFromSelection2);
					if (intIdProject > 0) {
						String idProject = intIdProject + ":";
						if (jTree_MiapeMSI.scrollToNode(idProject)) {
							enableProjectAndDocumentManagement(true,
									getStringFromJTreeSelection(jTree_MiapeMS));
							projectDuplicated = true;
						}
					}

				}
			}
		} else {
			this.clearMIAPEInformationMS();
		}
		if (!projectDuplicated && jTree_MiapeMS.getSelectionCount() > 0)
			this.jTree_MiapeMSI.clearSelection();
		if (this.jTree_MiapeMSI.isSelectionEmpty())
			this.clearMIAPEInformationMSI();
		return projectDuplicated;
	}

	private boolean updateSelectionGE() {
		boolean projectDuplicated = false;
		if (!jTree_MiapeGE.isSelectionEmpty()
				&& this.jTree_MiapeGE.isOnlyOneNodeSelected(3)) {
			final String stringFromSelection = jTree_MiapeGE
					.getStringFromSelection(MIAPE_ID_REGEXP);
			if (!"".equals(stringFromSelection)
					&& Integer.valueOf(stringFromSelection) > 0) {
				// if there is other miapeheaderloaderprocess,
				// cancel it
				if (this.miapeHeaderLoaderTask != null
						&& this.miapeHeaderLoaderTask.getState().equals(
								StateValue.STARTED))
					this.miapeHeaderLoaderTask.cancel(true);

				// this.jProgressBar_translation.setIndeterminate(true);
				this.miapeHeaderLoaderTask = new MiapeHeaderLoaderTask(
						Integer.valueOf(stringFromSelection), "GE",
						this.miapeAPIWebservice, this.miapeExtractorWebservice,
						this.userName, this.password);
				this.miapeHeaderLoaderTask.addPropertyChangeListener(this);
				this.miapeHeaderLoaderTask.execute();

				// this.jProgressBar_translation.setIndeterminate(false);
				// if a project is selected, select the same project in the
				// other tree
			} else {
				final String stringFromSelection2 = jTree_MiapeGE
						.getStringFromSelection(PROJECT_ID_REGEXP);
				if (!"".equals(stringFromSelection2)
						&& Integer.valueOf(stringFromSelection2) > 0
						&& jTree_MiapeGE.isOnlyOneNodeSelected(2)) {
					int intIdProject = Integer.valueOf(stringFromSelection2);
					if (intIdProject > 0) {
						String idProject = intIdProject + ":";
						if (jTree_MiapeGI.scrollToNode(idProject)) {
							enableProjectAndDocumentManagement(true,
									getStringFromJTreeSelection(jTree_MiapeGE));
							projectDuplicated = true;
						}
					}

				}
			}
		} else {
			this.clearMIAPEInformationMS();
		}
		if (!projectDuplicated && jTree_MiapeGE.getSelectionCount() > 0)
			this.jTree_MiapeGI.clearSelection();
		if (this.jTree_MiapeGI.isSelectionEmpty())
			this.clearMIAPEInformationMSI();
		return projectDuplicated;
	}

	private boolean loadingTaskIsNotRunning() {
		return treeLoaderTask.isDone() || treeLoaderTask.isCancelled();
	}

	private void updateProjectAndDocumentManagement() {

		if (this.jTree_MiapeMS.getSelectionCount()
				+ this.jTree_MiapeMSI.getSelectionCount() == 1) {
			String labelText = "";
			if (this.jTree_MiapeMS.isOnlyOneNodeSelected(3)
					|| this.jTree_MiapeMS.isOnlyOneNodeSelected(2)) {
				labelText = getStringFromJTreeSelection(jTree_MiapeMS);
				enableProjectAndDocumentManagement(true, labelText);
			} else if (this.jTree_MiapeMSI.isOnlyOneNodeSelected(3)
					|| this.jTree_MiapeMSI.isOnlyOneNodeSelected(2)) {
				labelText = getStringFromJTreeSelection(jTree_MiapeMSI);
				enableProjectAndDocumentManagement(true, labelText);
			} else {
				enableProjectAndDocumentManagement(false, "");
			}
		} else if (this.jTree_MiapeMS.isOnlyOneNodeSelected(2)
				&& this.jTree_MiapeMSI.isOnlyOneNodeSelected(2)) {
			enableProjectAndDocumentManagement(true,
					getStringFromJTreeSelection(jTree_MiapeMSI));
		} else if (this.jTree_MiapeGE.getSelectionCount()
				+ this.jTree_MiapeGI.getSelectionCount() == 1) {
			String labelText = "";
			if (this.jTree_MiapeGE.isOnlyOneNodeSelected(3)
					|| this.jTree_MiapeGE.isOnlyOneNodeSelected(2)) {
				labelText = getStringFromJTreeSelection(jTree_MiapeGE);
				enableProjectAndDocumentManagement(true, labelText);
			} else if (this.jTree_MiapeGI.isOnlyOneNodeSelected(3)
					|| this.jTree_MiapeGI.isOnlyOneNodeSelected(2)) {
				labelText = getStringFromJTreeSelection(jTree_MiapeGI);
				enableProjectAndDocumentManagement(true, labelText);
			} else {
				enableProjectAndDocumentManagement(false, "");
			}
		} else if (this.jTree_MiapeGE.isOnlyOneNodeSelected(2)
				&& this.jTree_MiapeGI.isOnlyOneNodeSelected(2)) {
			enableProjectAndDocumentManagement(true,
					getStringFromJTreeSelection(jTree_MiapeGI));
		} else {
			enableProjectAndDocumentManagement(false, "select just one item");
		}
	}

	private void enableProjectAndDocumentManagement(boolean b, String labelText) {
		if (labelText == null)
			labelText = "select just one item";
		this.jButtonDeleteProjectOrDocument.setEnabled(b);
		this.jLabelProjectOrDocument.setEnabled(b);
		this.jLabelProjectOrDocument.setText(labelText);
	}

	public void disableProjectAndDocumentManagement(boolean b) {
		this.jButtonDeleteProjectOrDocument.setEnabled(b);
		this.jLabelProjectOrDocument.setEnabled(b);
	}

	public void showMIAPEMSInformation(MiapeHeader miapeHeader) {

		log.info("showing MIAPE MS Header information in dialog");
		if (miapeHeader != null) {
			final MiapeDocument header = miapeHeader.getMiapeDocument();
			if (header != null) {
				if (header.getName() != null)
					this.jTextFieldMIAPEMSName.setText(header.getName());
				if (header.getVersion() != null)
					this.jTextFieldVersionMS.setText(header.getVersion());
				Date modificationDate = header.getModificationDate();
				if (modificationDate != null
						&& modificationDate.toString() != null)
					this.jTextFieldModificationDateMS.setText(modificationDate
							.toString());
				if (header.getId() > 0)
					this.jTextFieldMIAPEMSID.setText(String.valueOf(header
							.getId()));
				final Project project = header.getProject();
				if (project != null) {
					if (project.getName() != null
							&& !project.getName().equals("")) {
						this.jTextFieldProjectMSName.setText(project.getName());
					}
					if (project.getId() > 0)
						this.jTextFieldProjectMSID.setText(String
								.valueOf(project.getId()));
				}
				this.jButtonShowReport1.setEnabled(true);

				// select this document in the MIAPE MS tree
				this.jTree_MiapeMS.selectNode("MIAPE MS " + header.getId());
				// Change title
				if (this.jTabbedPane1.getSelectedIndex() == 0) {
					this.jLabelMSTitle.setText("Selected MIAPE MS document:");
				}
			}
		}
	}

	public void showMIAPEGEInformation(MiapeHeader miapeHeader) {

		log.info("showing MIAPE GE Header information in dialog");
		if (miapeHeader != null) {
			final MiapeDocument header = miapeHeader.getMiapeDocument();
			if (header != null) {
				if (header.getName() != null)
					this.jTextFieldMIAPEMSName.setText(header.getName());
				if (header.getVersion() != null)
					this.jTextFieldVersionMS.setText(header.getVersion());
				Date modificationDate = header.getModificationDate();
				if (modificationDate != null
						&& modificationDate.toString() != null)
					this.jTextFieldModificationDateMS.setText(modificationDate
							.toString());
				if (header.getId() > 0)
					this.jTextFieldMIAPEMSID.setText(String.valueOf(header
							.getId()));
				final Project project = header.getProject();
				if (project != null) {
					if (project.getName() != null
							&& !project.getName().equals("")) {
						this.jTextFieldProjectMSName.setText(project.getName());
					}
					if (project.getId() > 0)
						this.jTextFieldProjectMSID.setText(String
								.valueOf(project.getId()));
				}
				this.jButtonShowReport1.setEnabled(true);

				// select this document in the MIAPE GE tree
				this.jTree_MiapeGE.selectNode("MIAPE GE " + header.getId());
				// Change title
				if (this.jTabbedPane1.getSelectedIndex() == 1) {
					this.jLabelMSTitle.setText("Selected MIAPE GE document:");
				}
			}
		}
	}

	public void showMIAPEMSIInformation(MiapeHeader miapeHeader) {
		log.info("showing MIAPE MSI Header information in dialog");
		if (miapeHeader != null) {
			final MiapeDocument header = miapeHeader.getMiapeDocument();
			if (header != null) {
				if (header.getName() != null)
					this.jTextFieldMIAPEMSIName.setText(header.getName());
				if (header.getVersion() != null)
					this.jTextFieldVersionMSI.setText(header.getVersion());
				if (header.getModificationDate().toString() != null)
					this.jTextFieldModificationDateMSI.setText(header
							.getModificationDate().toString());
				if (header.getId() > 0)
					this.jTextFieldMIAPEMSIID.setText(String.valueOf(header
							.getId()));
				final Project project = header.getProject();
				if (project != null) {
					if (project.getName() != null
							&& !project.getName().equals("")) {
						this.jTextFieldProjectMSIName
								.setText(project.getName());
					}
					if (project.getId() > 0)
						this.jTextFieldProjectMSIID.setText(String
								.valueOf(project.getId()));
				}
				this.jButtonShowReport2.setEnabled(true);
				// Change title
				if (this.jTabbedPane1.getSelectedIndex() == 0) {
					this.jLabelMSITitle.setText("Selected MIAPE MSI document:");
				}
			}
		}
	}

	public void showMIAPEGIInformation(MiapeHeader miapeHeader) {
		log.info("showing MIAPE GI Header information in dialog");
		if (miapeHeader != null) {
			final MiapeDocument header = miapeHeader.getMiapeDocument();
			if (header != null) {
				if (header.getName() != null)
					this.jTextFieldMIAPEMSIName.setText(header.getName());
				if (header.getVersion() != null)
					this.jTextFieldVersionMSI.setText(header.getVersion());
				if (header.getModificationDate().toString() != null)
					this.jTextFieldModificationDateMSI.setText(header
							.getModificationDate().toString());
				if (header.getId() > 0)
					this.jTextFieldMIAPEMSIID.setText(String.valueOf(header
							.getId()));
				final Project project = header.getProject();
				if (project != null) {
					if (project.getName() != null
							&& !project.getName().equals("")) {
						this.jTextFieldProjectMSIName
								.setText(project.getName());
					}
					if (project.getId() > 0)
						this.jTextFieldProjectMSIID.setText(String
								.valueOf(project.getId()));
				}
				this.jButtonShowReport2.setEnabled(true);

				// Change title
				if (this.jTabbedPane1.getSelectedIndex() == 1) {
					this.jLabelMSITitle.setText("Selected MIAPE GI document:");
				}
			}
		}
	}

	@Override
	public void propertyChange(PropertyChangeEvent evt) {
		if ("progress".equals(evt.getPropertyName())) {
			int progress = (Integer) evt.getNewValue();
			jProgressBar_translation.setValue(progress);

		} else if (MiapeExtractionTask.NOTIFICATION.equals(evt
				.getPropertyName())) {
			String notificacion = evt.getNewValue().toString();
			this.appendStatus(notificacion);
		} else if (TreeLoaderTask.TREE_LOADER_MS_NUMBER.equals(evt
				.getPropertyName())) {
			Integer numMS = (Integer) evt.getNewValue();
			this.jLabelMSDocumentsLoaded.setText(String.valueOf(numMS));

		} else if (TreeLoaderTask.TREE_LOADER_STARTS.equals(evt
				.getPropertyName())) {
			this.disableControls(false);
			this.appendStatus("Loading MIAPE documents...");
		} else if (TreeLoaderTask.TREE_LOADER_DONE
				.equals(evt.getPropertyName())) {
			this.disableControls(true);
			this.appendStatus("MIAPE documents loaded.");
		} else if (TreeLoaderTask.TREE_LOADER_MSI_NUMBER.equals(evt
				.getPropertyName())) {
			Integer numMSI = (Integer) evt.getNewValue();
			this.jLabelMSIDocumentsLoaded.setText(String.valueOf(numMSI));
		} else if (TreeLoaderTask.TREE_LOADER_GE_NUMBER.equals(evt
				.getPropertyName())) {
			Integer numGE = (Integer) evt.getNewValue();
			this.jLabelGEDocumentsLoaded.setText(String.valueOf(numGE));
		} else if (TreeLoaderTask.TREE_LOADER_GI_NUMBER.equals(evt
				.getPropertyName())) {
			Integer numGI = (Integer) evt.getNewValue();
			this.jLabelGIDocumentsLoaded.setText(String.valueOf(numGI));
		} else if (MiapeDeleterTask.DELETING_STARTED.equals(evt
				.getPropertyName())) {
			// this.disableControls(false);
			String startMessage = (String) evt.getNewValue();

			this.appendStatus(startMessage);
		} else if (MiapeDeleterTask.DELETING_FINISHED.equals(evt
				.getPropertyName())) {
			String finishMessage = (String) evt.getNewValue();
			this.appendStatus(finishMessage);
			if (finishMessage.contains("Project")) {
				jTree_MiapeMS.removeNodeStartingBy(MiapeDeleterTask
						.getMiapeIdentifier(finishMessage) + ":");
				jTree_MiapeMSI.removeNodeStartingBy(MiapeDeleterTask
						.getMiapeIdentifier(finishMessage) + ":");
			} else if (finishMessage.contains("MSI")) {
				jTree_MiapeMSI.removeNodeStartingBy("MIAPE MSI "
						+ MiapeDeleterTask.getMiapeIdentifier(finishMessage));
			} else if (finishMessage.contains("MS ")) {
				jTree_MiapeMS.removeNodeStartingBy("MIAPE MS "
						+ MiapeDeleterTask.getMiapeIdentifier(finishMessage));
			} else if (finishMessage.contains("GE")) {
				jTree_MiapeMSI.removeNodeStartingBy("MIAPE GE "
						+ MiapeDeleterTask.getMiapeIdentifier(finishMessage));
			} else if (finishMessage.contains("GI")) {
				jTree_MiapeMSI.removeNodeStartingBy("MIAPE GI "
						+ MiapeDeleterTask.getMiapeIdentifier(finishMessage));
			}
			this.disableControls(true);
			updateProjectAndDocumentManagement();
		} else if (MiapeDeleterTask.DELETING_ERROR
				.equals(evt.getPropertyName())) {
			String errorMessage = (String) evt.getNewValue();
			this.appendStatus(errorMessage);
			this.disableControls(true);
			updateProjectAndDocumentManagement();
		} else if (MiapeHeaderLoaderTask.MIAPE_HEADER_RETRIEVING_STARTS
				.equals(evt.getPropertyName())) {
			this.appendStatus((String) evt.getNewValue());
		} else if (MiapeHeaderLoaderTask.MIAPE_HEADER_RETRIEVING_FINISH
				.equals(evt.getPropertyName())) {

		} else if (MiapeHeaderLoaderTask.MIAPE_HEADER_RETRIEVING_ERROR
				.equals(evt.getPropertyName())) {
			this.appendStatus((String) evt.getNewValue());
		} else if (MiapeHeaderLoaderTask.MIAPE_HEADER_RETRIEVING_RETURN_MS_HEADER
				.equals(evt.getPropertyName())) {

			MiapeHeader header = (MiapeHeader) evt.getNewValue();
			this.showMIAPEMSInformation(header);

		} else if (MiapeHeaderLoaderTask.MIAPE_HEADER_RETRIEVING_RETURN_MSI_HEADER
				.equals(evt.getPropertyName())) {
			MiapeHeader header = (MiapeHeader) evt.getNewValue();
			this.showMIAPEMSIInformation(header);
		} else if (MiapeHeaderLoaderTask.MIAPE_HEADER_RETRIEVING_RETURN_GE_HEADER
				.equals(evt.getPropertyName())) {

			MiapeHeader header = (MiapeHeader) evt.getNewValue();
			this.showMIAPEGEInformation(header);

		} else if (MiapeHeaderLoaderTask.MIAPE_HEADER_RETRIEVING_RETURN_GI_HEADER
				.equals(evt.getPropertyName())) {
			MiapeHeader header = (MiapeHeader) evt.getNewValue();
			this.showMIAPEGIInformation(header);
		}

	}

	/**
	 * Gets a project from the database using the webservice
	 * 
	 * @param idProject
	 * @param userName
	 * @param password
	 * @return the {@link Project} object or null
	 * @throws MiapeSecurityException
	 * @throws MiapeDatabaseException
	 * @throws RemoteException
	 */
	private Project getProject(Integer idProject, String userName,
			String password) throws MiapeSecurityException_Exception,
			MiapeDatabaseException_Exception, RemoteException {
		JAXBContext jc;
		try {
			jc = JAXBContext
					.newInstance("org.proteored.miapeapi.xml.miapeproject.autogenerated");
			Project project = null;
			byte[] projectBytes = this.miapeAPIWebservice.getProjectById(
					idProject, userName, password);
			ProjectFile projectFile = new ProjectFile(projectBytes);
			project = new ProjectImpl((MIAPEProject) jc.createUnmarshaller()
					.unmarshal(projectFile.toFile()), null, null);
			return project;
		} catch (JAXBException e) {
			e.printStackTrace();

		} catch (IOException e) {
			e.printStackTrace();

		}
		return null;
	}

	/**
	 * Clear all the text fields in the rigth panel
	 */
	public void clearMIAPEInformationMS() {
		this.jTextFieldMIAPEMSID.setText("");
		this.jTextFieldProjectMSID.setText("");
		this.jTextFieldProjectMSName.setText("");
		this.jTextFieldMIAPEMSName.setText("");
		this.jTextFieldVersionMS.setText("");
		this.jTextFieldModificationDateMS.setText("");
		this.jTextFieldMIAPEMSName.setText("");
		this.jTextFieldModificationDateMS.setText("");
		this.jTextFieldMIAPEMSID.setText("");

		this.jButtonShowReport1.setEnabled(false);

	}

	public void clearMIAPEInformationMSI() {
		this.jTextFieldMIAPEMSIID.setText("");
		this.jTextFieldProjectMSIID.setText("");
		this.jTextFieldProjectMSIName.setText("");
		this.jTextFieldMIAPEMSIName.setText("");
		this.jTextFieldVersionMSI.setText("");
		this.jTextFieldModificationDateMSI.setText("");
		this.jTextFieldMIAPEMSIName.setText("");
		this.jTextFieldModificationDateMSI.setText("");
		this.jTextFieldMIAPEMSIID.setText("");

		this.jButtonShowReport2.setEnabled(false);

	}

	public String getStatus() {
		return this.jTextAreaStatus.getText();
	}

	private void appendStatus(String text) {
		this.jTextAreaStatus.append(text + "\n");
		this.jTextAreaStatus.setCaretPosition(this.jTextAreaStatus.getText()
				.length() - 1);
	}

	public void setLoadedMSDocumentsNumber(String number) {
		this.jLabelMSDocumentsLoaded.setText(number);
	}

	public void setLoadedMSIDocumentsNumber(String number) {
		this.jLabelMSIDocumentsLoaded.setText(number);
	}

	// GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton jButtonClearStatus;
	private javax.swing.JButton jButtonDeleteProjectOrDocument;
	private javax.swing.JButton jButtonLoadTrees;
	private javax.swing.JButton jButtonShowReport1;
	private javax.swing.JButton jButtonShowReport2;
	private javax.swing.JButton jButtonStopLoadTree;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabelGEDocumentsLoaded;
	private javax.swing.JLabel jLabelGIDocumentsLoaded;
	private javax.swing.JLabel jLabelMIAPEMSID;
	private javax.swing.JLabel jLabelMIAPEMSIID;
	private javax.swing.JLabel jLabelMIAPEMSIName;
	private javax.swing.JLabel jLabelMIAPEMSName;
	private javax.swing.JLabel jLabelMSDocumentsLoaded;
	private javax.swing.JLabel jLabelMSIDocumentsLoaded;
	private javax.swing.JLabel jLabelMSITitle;
	private javax.swing.JLabel jLabelMSTitle;
	private javax.swing.JLabel jLabelModificationDateMS;
	private javax.swing.JLabel jLabelModificationDateMSI;
	private javax.swing.JLabel jLabelProjectMSID;
	private javax.swing.JLabel jLabelProjectMSIID;
	private javax.swing.JLabel jLabelProjectMSIName;
	private javax.swing.JLabel jLabelProjectMSName;
	private javax.swing.JLabel jLabelProjectOrDocument;
	private javax.swing.JLabel jLabelVersionMS;
	private javax.swing.JLabel jLabelVersionMSI;
	private javax.swing.JMenu jMenu1;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanelDelete;
	private javax.swing.JPanel jPanelGE_GI;
	private javax.swing.JPanel jPanelInfo;
	private javax.swing.JPanel jPanelMS_MSI;
	private javax.swing.JPanel jPanelNumbers;
	private javax.swing.JPanel jPanelStatus;
	private javax.swing.JPanel jPanel_GE;
	private javax.swing.JPanel jPanel_MS;
	private javax.swing.JPanel jPanel_MSI;
	private javax.swing.JPanel jPanel_MSI1;
	public javax.swing.JProgressBar jProgressBar_translation;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JScrollPane jScrollPane5;
	private javax.swing.JTabbedPane jTabbedPane1;
	public javax.swing.JTextArea jTextAreaStatus;
	public javax.swing.JTextField jTextFieldMIAPEMSID;
	public javax.swing.JTextField jTextFieldMIAPEMSIID;
	public javax.swing.JTextField jTextFieldMIAPEMSIName;
	public javax.swing.JTextField jTextFieldMIAPEMSName;
	public javax.swing.JTextField jTextFieldModificationDateMS;
	public javax.swing.JTextField jTextFieldModificationDateMSI;
	public javax.swing.JTextField jTextFieldProjectMSID;
	public javax.swing.JTextField jTextFieldProjectMSIID;
	public javax.swing.JTextField jTextFieldProjectMSIName;
	public javax.swing.JTextField jTextFieldProjectMSName;
	public javax.swing.JTextField jTextFieldVersionMS;
	public javax.swing.JTextField jTextFieldVersionMSI;
	public ExtendedJTree jTree_MiapeGE;
	public ExtendedJTree jTree_MiapeGI;
	public ExtendedJTree jTree_MiapeMS;
	public ExtendedJTree jTree_MiapeMSI;
	// End of variables declaration//GEN-END:variables

}
