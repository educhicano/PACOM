package org.proteored.pacom.gui.tasks;

import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;

import javax.mail.MethodNotSupportedException;
import javax.swing.SwingWorker;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.apache.commons.io.FilenameUtils;
import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ms.MSFileType;
import org.proteored.miapeapi.exceptions.MiapeDatabaseException;
import org.proteored.miapeapi.exceptions.MiapeSecurityException;
import org.proteored.miapeapi.exceptions.WrongXMLFormatException;
import org.proteored.miapeapi.factories.ms.MiapeMSDocumentFactory;
import org.proteored.miapeapi.interfaces.ms.MiapeMSDocument;
import org.proteored.miapeapi.interfaces.ms.ResultingData;
import org.proteored.miapeapi.interfaces.xml.MiapeXmlFile;
import org.proteored.miapeapi.text.tsv.msi.TableTextFileSeparator;
import org.proteored.miapeapi.xml.ms.MiapeMSDocumentImpl;
import org.proteored.miapeapi.xml.ms.adapter.ResultingDataAdapter;
import org.proteored.miapeapi.xml.ms.autogenerated.MSMIAPEMS;
import org.proteored.miapeapi.xml.ms.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.ms.util.MsControlVocabularyXmlFactory;
import org.proteored.pacom.analysis.util.FileManager;
import org.proteored.pacom.analysis.util.LocalFilesIndex;
import org.proteored.pacom.utils.MiapeExtractionResult;
import org.proteored.pacom.utils.MiapeExtractionRunParameters;

public class MiapeExtractionTask extends SwingWorker<Void, Void> {
	private static final int CHECKING_INPUTS = 1;
	private static final int CONVERTING = 3;
	private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger("log4j.logger.org.proteored");
	private MiapeLocalExtractor miapeLocalExtractor;
	public static final String NOTIFICATION = "notification";
	public static final String MIAPE_MSI_CREATED_DONE = "MIAPE MSI CREATED_DONE";
	public static final String MIAPE_MS_CREATED_DONE = "MIAPE MS CREATED_DONE";
	public static final String MIAPE_CREATION_ERROR = "MIAPE CREATION ERROR";
	public static final String MIAPE_CREATION_CANCELED = "MIAPE CREATION CANCELED";
	public static final String MIAPE_CREATION_TOTAL_DONE = "MIAPE CREATION TOTAL DONE";
	public static final String MIAPE_CREATION_STARTS = "MIAPE CREATION STARTS";
	public static final String MIAPE_CREATION_COMPRESSING_FILE = "MIAPE CREATION COMPRESSING FILE";
	public static final String MIAPE_CREATION_COMPRESSING_FILE_DONE = "MIAPE CREATION COMPRESSING FILE DONE";
	public static final String MIAPE_CREATION_WAITING_FOR_OTHER_JOB_COMPLETION = "MIAPE_CREATION_WAITING_FOR_OTHER_JOB_COMPLETION";
	public static final String MIAPE_CREATION_COPYING_FILE = "MIAPE_CREATION_COPYING_FILE";
	public static final String MIAPE_CREATION_COPYING_FILE_DONE = "MIAPE_CREATION_COPYING_FILE_DONE";
	private static int numTasks = 1;
	private int identifier;
	/*
	 * Main task. Executed in background threadProgress.
	 */
	private final MiapeExtractionRunParameters miapeExtractorInputParameters;
	// private Thread threadProgress;

	private int taskStatus;
	private long initialTime;
	// private String firstUploadedFile;
	// private String secondUploadedFile;
	private String directLinksText;
	private File id_msi;
	private File id_ms;
	private String uploadedMGFFile;
	private String uploadedMzMLFile;
	private boolean localProcessingInParallel = false;

	public MiapeExtractionTask(MiapeExtractionRunParameters params, boolean localProcessingInParallel) {
		this(params);
		this.localProcessingInParallel = localProcessingInParallel;

	}

	public MiapeExtractionTask(MiapeExtractionRunParameters params) {
		miapeExtractorInputParameters = params;

		identifier = MiapeExtractionTask.numTasks++;

	}

	public MiapeExtractionTask(Integer runIdentifier, MiapeExtractionRunParameters parameters,

			boolean processInParallel) {

		this(parameters, processInParallel);
		if (runIdentifier != null)
			identifier = runIdentifier;

		log.info("Creating new MIAPE Extraction job= " + identifier);
		log.info(miapeExtractorInputParameters);

	}

	public MiapeExtractionTask(Integer runIdentifier, MiapeExtractionRunParameters parameters) {

		this(parameters);
		if (runIdentifier != null)
			identifier = runIdentifier;

		log.info("Creating new MIAPE Extraction job= " + identifier);
		log.info(miapeExtractorInputParameters);

	}

	public static void resetIdentifiers() {
		MiapeExtractionTask.numTasks = 1;
	}

	private boolean checkInputs() {
		taskStatus = CHECKING_INPUTS;
		if (miapeExtractorInputParameters.isMzMLSelected() && "".equals(getFirstInputFileName())) {
			firePropertyChange(MIAPE_CREATION_ERROR, null,
					new MiapeExtractionResult(identifier, "Error. Select one file to upload."));
			return false;
		}
		if (miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected()) {
			if ("".equals(miapeExtractorInputParameters.getMgfFileName())) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error. Select the MGF peak list file"));
				return false;
			}
			if (miapeExtractorInputParameters.getMiapeMSMetadata() == null) {
				firePropertyChange(MIAPE_CREATION_ERROR, null, new MiapeExtractionResult(identifier,
						"Error. Some metadata is required in order to complete the MS dataset information"));
				return false;
			}

		}
		if (miapeExtractorInputParameters.isMGFSelected()) {
			if ("".equals(miapeExtractorInputParameters.getMgfFileName())) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error. Select the MGF peak list file"));
				return false;
			}
			if (miapeExtractorInputParameters.getMiapeMSMetadata() == null) {
				firePropertyChange(MIAPE_CREATION_ERROR, null, new MiapeExtractionResult(identifier,
						"Error. Some metadata is required in order to complete the MS dataset information"));
				return false;
			}

		}
		if (miapeExtractorInputParameters.isMzMLPlusMzIdentMLSelected()
				|| miapeExtractorInputParameters.isMzIdentMLSelected()
				|| miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected()) {
			if ("".equals(miapeExtractorInputParameters.getMzIdentMLFileName())) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error. Select the mzIdentML file"));
				return false;
			}
		}
		if (miapeExtractorInputParameters.isXTandemPlusMGFSelected()
				|| miapeExtractorInputParameters.isXTandemSelected()) {
			if ("".equals(miapeExtractorInputParameters.getXTandemFileName())) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error. Select the XTandem XML file"));
				return false;
			}
		}
		if (miapeExtractorInputParameters.isDTASelectPlusMGFSelected()
				|| miapeExtractorInputParameters.isDTASelectSelected()) {
			if ("".equals(miapeExtractorInputParameters.getDtaSelectFileName())) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error. Select the DTASelect-filter txt file"));
				return false;
			}
		}
		if (miapeExtractorInputParameters.isPepXMLPlusMGFSelected()
				|| miapeExtractorInputParameters.isPepXMLSelected()) {
			if ("".equals(miapeExtractorInputParameters.getPepXMLFileName())) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error. Select the pepXML file"));
				return false;
			}
		}
		if (!miapeExtractorInputParameters.isMIAPEMSChecked() && !miapeExtractorInputParameters.isMIAPEMSIChecked()) {
			firePropertyChange(MIAPE_CREATION_ERROR, null,
					new MiapeExtractionResult(identifier, "Error. Select one output MIAPE type."));
			return false;
		}

		if (miapeExtractorInputParameters.getProjectName().equals("")) {
			firePropertyChange(MIAPE_CREATION_ERROR, null,
					new MiapeExtractionResult(identifier, "Error. You need to state a project name.\n"
							+ "If the project doesn't exist, it will be created.\n"
							+ "If the project already exists, the dataset(s) will be created in that project."));
			return false;
		}
		if (getParameters().getAssociatedMiapeMSGeneratorJob() != null
				&& getParameters().getAssociatedMiapeMS() == null) {
			firePropertyChange(MIAPE_CREATION_WAITING_FOR_OTHER_JOB_COMPLETION, null,
					new MiapeExtractionResult(identifier,
							"The job '" + identifier + "' is waiting for the completion of job '"
									+ getParameters().getAssociatedMiapeMSGeneratorJob()
									+ "' because it will use its MS dataset generated"));
			return false;
		}
		return true;
	}

	public boolean isLocalProcessingInParallel() {
		return localProcessingInParallel;
	}

	public void setLocalProcessingInParallel(boolean localProcessingInParallel) {
		this.localProcessingInParallel = localProcessingInParallel;
	}

	/**
	 * Main method which convert the standard files to MIAPEs
	 *
	 * @throws WrongXMLFormatException
	 * @throws IOException
	 * @throws MethodNotSupportedException
	 * @throws MiapeSecurityException
	 * @throws MiapeDatabaseException
	 */
	private void convertFile2MIAPE()
			throws IOException, MethodNotSupportedException, MiapeDatabaseException, MiapeSecurityException {

		miapeLocalExtractor = new MiapeLocalExtractor(this, identifier, localProcessingInParallel);

		id_msi = null;
		id_ms = null;
		MiapeMSDocument miapeMSMetadata = null;
		if (miapeExtractorInputParameters.isMIAPEMSChecked()) {
			miapeMSMetadata = miapeExtractorInputParameters.getMiapeMSMetadata();
		}
		MiapeXmlFile<MiapeMSDocument> tinnyMiapeMS = null;
		if (miapeMSMetadata != null)
			tinnyMiapeMS = miapeMSMetadata.toXml();
		// String fileFormat = parentDialog.
		// .inputFileFormatGroup.getSelection().getActionCommand();
		// if (fileFormat.equals(XmlFormat.MZ_IDENT.id)) {
		if (miapeExtractorInputParameters.isMzMLSelected()) {
			extractMIAPEfromMzMLFile(miapeExtractorInputParameters.isFastParsing(), tinnyMiapeMS);
		} else if (miapeExtractorInputParameters.isMzIdentMLSelected()
				|| miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected()) {
			extractMIAPEfromMzIdentMLFile(tinnyMiapeMS);
			// }else if(fileFormat.equals(XmlFormat.PRIDE.id)) {
		} else if (miapeExtractorInputParameters.isMzMLPlusMzIdentMLSelected()) {
			extractMIAPEfromMzMLAndMzIdentMLFile(miapeExtractorInputParameters.isFastParsing(), tinnyMiapeMS);
		} else if (miapeExtractorInputParameters.isXTandemSelected()
				|| miapeExtractorInputParameters.isXTandemPlusMGFSelected()) {
			extractMIAPEfromXTandemXMLFile(tinnyMiapeMS);
		} else if (miapeExtractorInputParameters.isDTASelectSelected()
				|| miapeExtractorInputParameters.isDTASelectPlusMGFSelected()) {
			extractMIAPEfromDTASelectFile(tinnyMiapeMS);
		} else if (miapeExtractorInputParameters.isPepXMLSelected()
				|| miapeExtractorInputParameters.isPepXMLPlusMGFSelected()) {
			extractMIAPEfromPepXMLFile(tinnyMiapeMS);
		} else if (miapeExtractorInputParameters.isTSVSelected()) {
			extractMIAPEfromTSVFile(tinnyMiapeMS, miapeExtractorInputParameters.getSeparator());
		} else if (miapeExtractorInputParameters.isPRIDESelected()) {
			if (miapeExtractorInputParameters.isMIAPEMSChecked() && miapeExtractorInputParameters.isMIAPEMSIChecked()) {
				extractMIAPEfromPrideFile("MS_MSI");
			} else if (miapeExtractorInputParameters.isMIAPEMSChecked()) {
				extractMIAPEfromPrideFile("MS");
			} else if (miapeExtractorInputParameters.isMIAPEMSIChecked()) {
				extractMIAPEfromPrideFile("MSI");
			}
		} else if (miapeExtractorInputParameters.isMGFSelected()) {
			extractMIAPEfromMGFFile(tinnyMiapeMS);
			// }else if(fileFormat.equals(XmlFormat.PRIDE.id)) {
		}

		// standard2MIAPEFrame.waiting.close();

	}

	private void extractMIAPEfromMzMLAndMzIdentMLFile(boolean fastParser, MiapeXmlFile<MiapeMSDocument> tinnyMiapeMS) {

		String mzMLfile = miapeExtractorInputParameters.getMzMLFileName();

		String mzIdentMLFile = miapeExtractorInputParameters.getMzIdentMLFileName();

		taskStatus = CONVERTING;
		firePropertyChange(NOTIFICATION, null, "Extracting data from mzML file...");

		String miapeMSMetadataFilePath = null;
		if (tinnyMiapeMS != null) {
			miapeMSMetadataFilePath = tinnyMiapeMS.toFile().getAbsolutePath();
			// just upload metadata file if not localprocessing
			// just add resulting data if not localprocessing

		}
		File[] identifiers;
		if (tinnyMiapeMS != null) {
			identifiers = miapeLocalExtractor.storeMiapeMSMSIFromMzMLAndMzIdentMLAndMetadata(mzMLfile,
					miapeMSMetadataFilePath, mzIdentMLFile, miapeExtractorInputParameters.getProjectName(), fastParser);
		} else {
			identifiers = miapeLocalExtractor.storeMiapeMSMSIFromMzMLAndMzIdentML(mzMLfile, mzIdentMLFile,
					miapeExtractorInputParameters.getProjectName(), fastParser);
		}
		id_msi = identifiers[1];
		id_ms = identifiers[0];

	}

	private void extractMIAPEfromMGFFile(MiapeXmlFile<MiapeMSDocument> miapeMsXML)
			throws IOException, MiapeDatabaseException, MiapeSecurityException {

		uploadedMGFFile = miapeExtractorInputParameters.getMgfFileName();

		firePropertyChange(NOTIFICATION, null, "Extracting data from MGF file + metadata...");
		taskStatus = CONVERTING;

		MiapeXmlFile<MiapeMSDocument> miapeMSWithResultingData = addResultingData(miapeMsXML,
				miapeExtractorInputParameters.getProjectName());
		// log.info(miapeMsXML);

		id_ms = miapeLocalExtractor.storeMiapeMS(miapeMSWithResultingData.toDocument(),
				miapeExtractorInputParameters.getProjectName());

		id_msi = null;
	}

	private void extractMIAPEfromMzIdentMLFile(MiapeXmlFile<MiapeMSDocument> miapeMsXML) throws IOException {

		String mzIdentMLfile = miapeExtractorInputParameters.getMzIdentMLFileName();

		if (miapeExtractorInputParameters.isXTandemPlusMGFSelected())
			uploadedMGFFile = miapeExtractorInputParameters.getMgfFileName();

		taskStatus = CONVERTING;

		File[] identifiers = new File[2];

		if (miapeMsXML != null) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from mzIdentML file + metadata...");
			MiapeXmlFile<MiapeMSDocument> miapeMSWithResultingData = addResultingData(miapeMsXML,
					miapeExtractorInputParameters.getProjectName());
			// log.info(miapeMsXML);

			identifiers = miapeLocalExtractor.storeMiapeMSMSIFromMzIdentML(mzIdentMLfile,
					miapeMSWithResultingData.toBytes(), miapeExtractorInputParameters.getProjectName());

		} else {
			firePropertyChange(NOTIFICATION, null, "Extracting data from mzIdentML file...");

			int idMS = -1;
			Integer associatedMiapeMSID = miapeExtractorInputParameters.getAssociatedMiapeMS();
			if (associatedMiapeMSID != null)
				idMS = associatedMiapeMSID;

			identifiers = miapeLocalExtractor.storeMiapeMSIFromMzIdentML(mzIdentMLfile, idMS,
					miapeExtractorInputParameters.getProjectName());

		}
		id_msi = identifiers[1];
		id_ms = identifiers[0];
	}

	/**
	 * Add resulting data to the miape ms document.
	 *
	 * @param miapeMsXML
	 * @return
	 */
	private MiapeXmlFile<MiapeMSDocument> addResultingData(MiapeXmlFile<MiapeMSDocument> miapeMsXML,
			String projectName) {

		ResultingData resultingData = getResultingDataFromUploadedFile(projectName);
		if (resultingData != null) {
			ResultingDataAdapter resultingDataAdapter = new ResultingDataAdapter(resultingData, new ObjectFactory(),
					new MsControlVocabularyXmlFactory(new ObjectFactory(), getCvManager()));
			try {
				File file = miapeMsXML.toFile();
				JAXBContext jc = JAXBContext.newInstance("org.proteored.miapeapi.xml.ms.autogenerated");
				Unmarshaller unmarshaller = jc.createUnmarshaller();

				MSMIAPEMS miapeMS = (MSMIAPEMS) unmarshaller.unmarshal(file);
				miapeMS.getMSResultingData().add(resultingDataAdapter.adapt());

				MiapeMSDocument doc = new MiapeMSDocumentImpl(miapeMS, null, getCvManager(), null, null);
				return doc.toXml();
			} catch (JAXBException e) {
				e.printStackTrace();
			}
		}
		return miapeMsXML;
	}

	private ResultingData getResultingDataFromUploadedFile(String projectName) {
		String fileType = null;
		String fileName = null;
		String fileLocation = null;
		if (miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected() || miapeExtractorInputParameters.isMGFSelected()
				|| miapeExtractorInputParameters.isXTandemPlusMGFSelected()) {
			fileName = "MGF file";
			fileType = MSFileType.getInstance(getCvManager()).getCVTermByAccession(MSFileType.MASCOT_MGF)
					.getPreferredName();
			// if remote repository is not selected to store the files, save
			// first the mgf file locally
			try {
				uploadedMGFFile = FileManager.saveLocalFile(uploadedMGFFile, projectName).toURI().toString();
				LocalFilesIndex.getInstance().indexFileByProjectName(projectName, uploadedMGFFile);
			} catch (IOException e) {

			}

			fileLocation = uploadedMGFFile;
		} else if (miapeExtractorInputParameters.isMzMLPlusMzIdentMLSelected()
				|| miapeExtractorInputParameters.isMzMLSelected()) {
			fileName = "mzML file";
			fileType = MSFileType.getInstance(getCvManager()).getCVTermByAccession(MSFileType.MZML_ACC)
					.getPreferredName();
			try {
				uploadedMzMLFile = FileManager.saveLocalFile(uploadedMzMLFile, projectName).toURI().toString();
				LocalFilesIndex.getInstance().indexFileByProjectName(projectName, uploadedMzMLFile);
			} catch (IOException e) {

			}

			fileLocation = uploadedMzMLFile;
		}
		if (fileName != null)
			return MiapeMSDocumentFactory.createResultingDataBuilder(fileName).dataFileType(fileType)
					.dataFileURI(fileLocation).build();
		return null;
	}

	private ControlVocabularyManager getCvManager() {
		return OntologyLoaderTask.getCvManager();
	}

	private void extractMIAPEfromMzMLFile(boolean fastParser, MiapeXmlFile<MiapeMSDocument> miapeMsXML) {

		String mzMLfile = miapeExtractorInputParameters.getMzMLFileName();
		uploadedMzMLFile = mzMLfile;

		taskStatus = CONVERTING;
		firePropertyChange(NOTIFICATION, null, "Extracting data from mzML file...");
		final MiapeMSDocument miapeMSMetadata = miapeExtractorInputParameters.getMiapeMSMetadata();
		String miapeMSMetadataFilePath = null;
		if (miapeMsXML != null) {
			miapeMSMetadataFilePath = miapeMsXML.toFile().getAbsolutePath();

		}

		if (miapeMSMetadata != null) {
			id_ms = miapeLocalExtractor.storeMiapeMSFromMzMLAndMetadata(mzMLfile, miapeMSMetadataFilePath,
					miapeExtractorInputParameters.getProjectName(), fastParser);
		} else {
			id_ms = miapeLocalExtractor.storeMiapeMSFromMzML(mzMLfile, miapeExtractorInputParameters.getProjectName(),
					fastParser);
		}
		id_msi = null;

	}

	private void extractMIAPEfromXTandemXMLFile(MiapeXmlFile<MiapeMSDocument> miapeMsXML) throws IOException {

		String xTandemXMLfile = miapeExtractorInputParameters.getXTandemFileName();

		if (miapeExtractorInputParameters.isXTandemPlusMGFSelected())
			uploadedMGFFile = miapeExtractorInputParameters.getMgfFileName();

		taskStatus = CONVERTING;

		File[] identifiers = new File[2];

		if (miapeMsXML != null) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from XTandem XML file + metadata...");
			MiapeXmlFile<MiapeMSDocument> miapeMSWithResultingData = addResultingData(miapeMsXML,
					miapeExtractorInputParameters.getProjectName());
			// log.info(miapeMsXML);
			identifiers = miapeLocalExtractor.storeMiapeMSMSIFromXTandemXML(xTandemXMLfile,
					miapeMSWithResultingData.toBytes(), miapeExtractorInputParameters.getProjectName());

		} else {
			firePropertyChange(NOTIFICATION, null, "Extracting data from XTandem XML file...");

			int idMS = -1;
			Integer associatedMiapeMSID = miapeExtractorInputParameters.getAssociatedMiapeMS();
			if (associatedMiapeMSID != null)
				idMS = associatedMiapeMSID;

			identifiers = miapeLocalExtractor.storeMiapeMSIFromXTandemXML(xTandemXMLfile, idMS,
					miapeExtractorInputParameters.getProjectName());

		}
		id_msi = identifiers[1];
		id_ms = identifiers[0];

	}

	private void extractMIAPEfromDTASelectFile(MiapeXmlFile<MiapeMSDocument> miapeMsXML)
			throws IOException, MethodNotSupportedException {

		String dtaSelectFile = miapeExtractorInputParameters.getDtaSelectFileName();

		if (miapeExtractorInputParameters.isDTASelectPlusMGFSelected())
			uploadedMGFFile = miapeExtractorInputParameters.getMgfFileName();

		taskStatus = CONVERTING;

		File[] identifiers = new File[2];

		if (miapeMsXML != null) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from DTASelect file + metadata...");
			MiapeXmlFile<MiapeMSDocument> miapeMSWithResultingData = addResultingData(miapeMsXML,
					miapeExtractorInputParameters.getProjectName());
			// log.info(miapeMsXML);
			identifiers = miapeLocalExtractor.storeMiapeMSMSIFromDTASelect(dtaSelectFile,
					miapeMSWithResultingData.toBytes(), miapeExtractorInputParameters.getProjectName());

		} else {
			firePropertyChange(NOTIFICATION, null, "Extracting data from DTASelect file...");

			int idMS = -1;
			Integer associatedMiapeMSID = miapeExtractorInputParameters.getAssociatedMiapeMS();
			if (associatedMiapeMSID != null)
				idMS = associatedMiapeMSID;

			identifiers = miapeLocalExtractor.storeMiapeMSIFromDTASelect(dtaSelectFile, idMS,
					miapeExtractorInputParameters.getProjectName());

		}
		id_msi = identifiers[1];
		id_ms = identifiers[0];

	}

	private void extractMIAPEfromPepXMLFile(MiapeXmlFile<MiapeMSDocument> miapeMsXML)
			throws IOException, MethodNotSupportedException {

		String pepXMLFile = miapeExtractorInputParameters.getPepXMLFileName();

		if (miapeExtractorInputParameters.isPepXMLPlusMGFSelected())
			uploadedMGFFile = miapeExtractorInputParameters.getMgfFileName();

		taskStatus = CONVERTING;

		File[] identifiers = new File[2];

		if (miapeMsXML != null) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from pepXML file + metadata...");
			MiapeXmlFile<MiapeMSDocument> miapeMSWithResultingData = addResultingData(miapeMsXML,
					miapeExtractorInputParameters.getProjectName());
			// log.info(miapeMsXML);
			identifiers = miapeLocalExtractor.storeMiapeMSMSIFromPepXML(pepXMLFile, miapeMSWithResultingData.toBytes(),
					miapeExtractorInputParameters.getProjectName());

		} else {
			firePropertyChange(NOTIFICATION, null, "Extracting data from pepXML file...");

			int idMS = -1;
			Integer associatedMiapeMSID = miapeExtractorInputParameters.getAssociatedMiapeMS();
			if (associatedMiapeMSID != null)
				idMS = associatedMiapeMSID;

			identifiers = miapeLocalExtractor.storeMiapeMSIFromPepXML(pepXMLFile, idMS,
					miapeExtractorInputParameters.getProjectName());

		}
		id_msi = identifiers[1];
		id_ms = identifiers[0];

	}

	private void extractMIAPEfromTSVFile(MiapeXmlFile<MiapeMSDocument> miapeMsXML,
			TableTextFileSeparator tableTextFileSeparator) throws IOException, MethodNotSupportedException {

		String tsvSelectFile = miapeExtractorInputParameters.getTSVSelectFileName();

		taskStatus = CONVERTING;

		File[] identifiers = new File[2];

		if (miapeMsXML != null) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from TSV file + metadata...");
			MiapeXmlFile<MiapeMSDocument> miapeMSWithResultingData = addResultingData(miapeMsXML,
					miapeExtractorInputParameters.getProjectName());
			// log.info(miapeMsXML);

			identifiers = miapeLocalExtractor.storeMiapeMSMSIFromTSV(tsvSelectFile,
					miapeExtractorInputParameters.getSeparator(), miapeMSWithResultingData.toBytes(),
					miapeExtractorInputParameters.getProjectName());

		} else {
			firePropertyChange(NOTIFICATION, null, "Extracting data from TSV file...");

			int idMS = -1;
			Integer associatedMiapeMSID = miapeExtractorInputParameters.getAssociatedMiapeMS();
			if (associatedMiapeMSID != null)
				idMS = associatedMiapeMSID;

			identifiers = miapeLocalExtractor.storeMiapeMSIFromTSV(tsvSelectFile, tableTextFileSeparator, idMS,
					miapeExtractorInputParameters.getProjectName());

		}
		id_msi = identifiers[1];
		id_ms = identifiers[0];

	}

	private void extractMIAPEfromPrideFile(String miapeType) {
		File[] identifiers = new File[2];

		String prideFile = miapeExtractorInputParameters.getPRIDEXMLFileName();

		taskStatus = CONVERTING;

		final MiapeMSDocument miapeMSMetadata = miapeExtractorInputParameters.getMiapeMSMetadata();
		String miapeMSMetadataFilePath = null;
		if (miapeMSMetadata != null) {
			MiapeXmlFile<MiapeMSDocument> miapeMsXML = miapeMSMetadata.toXml();
			miapeMSMetadataFilePath = miapeMsXML.toFile().getAbsolutePath();
			// just upload metadata file if not localprocessing
			// just add resulting data if not localprocessing

			if (miapeType.equals("MSI"))
				miapeType = "MS_MSI";
		}

		// MSI
		if (miapeType.equals("MSI")) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from PRIDE file...");

			id_msi = miapeLocalExtractor.storeMiapeMSIFromPRIDE(prideFile,
					miapeExtractorInputParameters.getProjectName());

			// MS
		} else if (miapeType.equals("MS")) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from PRIDE file...");
			if (miapeMSMetadata != null) {
				id_ms = miapeLocalExtractor.storeMiapeMSFromPRIDEAndMetadata(prideFile, miapeMSMetadataFilePath,
						miapeExtractorInputParameters.getProjectName());
			} else {
				id_ms = miapeLocalExtractor.storeMiapeMSFromPRIDE(prideFile,
						miapeExtractorInputParameters.getProjectName());
			}
			// MS and MSI
		} else if (miapeType.equals("MS_MSI")) {

			firePropertyChange(NOTIFICATION, null, "Extracting data from PRIDE file...");
			if (miapeMSMetadata != null) {
				identifiers = miapeLocalExtractor.storeMiapeMSMSIFromPRIDEAndMetadata(prideFile,
						miapeMSMetadataFilePath, miapeExtractorInputParameters.getProjectName());
			} else {
				identifiers = miapeLocalExtractor.storeMiapeMSMSIFromPRIDE(prideFile,
						miapeExtractorInputParameters.getProjectName());
			}
			id_ms = identifiers[0];
			id_msi = identifiers[1];
		}

	}

	@Override
	public Void doInBackground() {
		log.info("Number of calls to convert is: " + MiapeExtractionTask.numTasks + " by "
				+ Thread.currentThread().getId() + " thread");

		setProgress(0);

		firePropertyChange(NOTIFICATION, null, "Checking input data.");
		if (checkInputs()) {
			firePropertyChange(MIAPE_CREATION_STARTS, null, identifier);
			firePropertyChange(NOTIFICATION, null, "Input data is correct.");

			try {

				initialTime = System.currentTimeMillis();

				// setProgress(50);
				convertFile2MIAPE();

			} catch (Exception e) {
				e.printStackTrace();
				if (!isCancelled()) {
					firePropertyChange(MIAPE_CREATION_ERROR, null,
							new MiapeExtractionResult(identifier,
									e.getMessage()
											+ "\nThere was a problem.\nCheck if the format was correct. Try again and if the problem persists,"
											+ " contact support at salvador@scripps.edu"));
				}
				// this.cancel(true);
			} finally {
				// setProgress(100);
			}
		} else {
			// an error message has already fired before in the checkinputs
		}

		// setProgress(100);
		return null;
	}

	private String getFirstInputFileName() {
		if (miapeExtractorInputParameters.isMzMLSelected())
			return miapeExtractorInputParameters.getMzMLFileName();
		if (miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected())
			return miapeExtractorInputParameters.getMzIdentMLFileName();
		if (miapeExtractorInputParameters.isMzIdentMLSelected())
			return miapeExtractorInputParameters.getMzIdentMLFileName();

		if (miapeExtractorInputParameters.isPRIDESelected())
			return miapeExtractorInputParameters.getPRIDEXMLFileName();
		if (miapeExtractorInputParameters.isMzMLPlusMzIdentMLSelected())
			return miapeExtractorInputParameters.getMzMLFileName();
		if (miapeExtractorInputParameters.isXTandemSelected())
			return miapeExtractorInputParameters.getXTandemFileName();
		if (miapeExtractorInputParameters.isMGFSelected())
			return miapeExtractorInputParameters.getMgfFileName();
		return null;
	}

	private String getSecondInputFileName() {

		if (miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected())
			return miapeExtractorInputParameters.getMgfFileName();
		if (miapeExtractorInputParameters.isMzMLPlusMzIdentMLSelected())
			return miapeExtractorInputParameters.getMzIdentMLFileName();

		return null;
	}

	/*
	 * Executed in event dispatching threadProgress
	 */
	@Override
	public void done() {

		Toolkit.getDefaultToolkit().beep();
		// threadProgress.interrupt();
		try {
			setProgress(100);

			if (isCancelled()) {
				firePropertyChange(MIAPE_CREATION_CANCELED, null, identifier);
				return;
			}
			if (taskStatus == CHECKING_INPUTS) {
				return;
			}

			if (id_msi != null || id_ms != null) {
				if (id_msi != null || id_ms != null) {
					firePropertyChange(NOTIFICATION, null, "Dataset(s) successfully imported");
				}
				File msiUrl = null;
				File msUrl = null;
				if (id_ms != null) {

					firePropertyChange(MIAPE_MS_CREATED_DONE, null, id_ms);

					msUrl = id_ms;

				}
				if (id_msi != null) {

					firePropertyChange(MIAPE_MSI_CREATED_DONE, null, id_msi);

					msiUrl = id_msi;

				}
				directLinksText = "";
				if (msUrl != null || msiUrl != null)
					directLinksText = "Direct link to your datasets:\n";
				if (msUrl != null)
					directLinksText += msUrl;
				if (msiUrl != null) {
					if (msUrl != null)
						directLinksText += "\n";
					directLinksText += msiUrl;
				}
				if (!"".equals(directLinksText)) {
					firePropertyChange(NOTIFICATION, null, directLinksText);

					long duration = (System.currentTimeMillis() - initialTime) / 60000;
					String unit = "minutes";
					if (duration == 0) {
						duration = (System.currentTimeMillis() - initialTime) / 1000;
						unit = "seconds";
					}

					firePropertyChange(NOTIFICATION, null, "The operation took " + duration + " " + unit);
				}
				// show the option to open a browser or not
				if (msUrl != null || msiUrl != null) {
					MiapeExtractionResult result = new MiapeExtractionResult(identifier);
					if (msUrl != null)
						result.setDirectLinkToMIAPEMS(msUrl);
					if (msiUrl != null)
						result.setDirectLinkToMIAPEMSI(msiUrl);
					result.setDirectLinkText(directLinksText);
					if (id_ms != null) {
						result.setMiapeMS_Identifier(FileManager
								.getMiapeMSIdentifierFromName(FilenameUtils.getBaseName(id_ms.getAbsolutePath())));
					}
					if (id_msi != null) {
						result.setMiapeMSI_Identifier(FileManager
								.getMiapeMSIIdentifierFromName(FilenameUtils.getBaseName(id_msi.getAbsolutePath())));
					}
					result.setMilliseconds(System.currentTimeMillis() - initialTime);
					firePropertyChange(MIAPE_CREATION_TOTAL_DONE, null, result);
				}

			} else {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error: Internal error."));
			}

		} catch (Exception e) {
			e.printStackTrace();
			firePropertyChange(MIAPE_CREATION_ERROR, null,
					new MiapeExtractionResult(identifier, "Error: " + e.getMessage()));
		}
	}

	public int getRunIdentifier() {
		return identifier;
	}

	public String getDescription() {
		return miapeExtractorInputParameters.getDescription();
	}

	public MiapeExtractionRunParameters getParameters() {
		return miapeExtractorInputParameters;
	}

}
