package org.proteored.pacom.gui.tasks;

import java.awt.Toolkit;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import javax.mail.MethodNotSupportedException;
import javax.swing.SwingWorker;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.proteored.miapeapi.cv.ControlVocabularyManager;
import org.proteored.miapeapi.cv.ms.MSFileType;
import org.proteored.miapeapi.exceptions.IllegalMiapeArgumentException;
import org.proteored.miapeapi.exceptions.WrongXMLFormatException;
import org.proteored.miapeapi.factories.ms.MiapeMSDocumentFactory;
import org.proteored.miapeapi.interfaces.ms.MiapeMSDocument;
import org.proteored.miapeapi.interfaces.ms.ResultingData;
import org.proteored.miapeapi.interfaces.xml.MiapeXmlFile;
import org.proteored.miapeapi.text.tsv.msi.TableTextFileSeparator;
import org.proteored.miapeapi.webservice.clients.miapeapi.MiapeAPIWebserviceDelegate;
import org.proteored.miapeapi.webservice.clients.miapeapi.MiapeDatabaseException_Exception;
import org.proteored.miapeapi.webservice.clients.miapeapi.MiapeSecurityException_Exception;
import org.proteored.miapeapi.webservice.clients.miapeextractor.MiapeExtractorDelegate;
import org.proteored.miapeapi.xml.ms.MiapeMSDocumentImpl;
import org.proteored.miapeapi.xml.ms.adapter.ResultingDataAdapter;
import org.proteored.miapeapi.xml.ms.autogenerated.MSMIAPEMS;
import org.proteored.miapeapi.xml.ms.autogenerated.ObjectFactory;
import org.proteored.miapeapi.xml.ms.util.MsControlVocabularyXmlFactory;
import org.proteored.miapeapi.zip.ZipManager;
import org.proteored.pacom.analysis.util.FileManager;
import org.proteored.pacom.analysis.util.LocalFilesIndex;
import org.proteored.pacom.gui.MainFrame;
import org.proteored.pacom.utils.MiapeExtractionResult;
import org.proteored.pacom.utils.MiapeExtractionRunParameters;

public class MiapeExtractionTask extends SwingWorker<Void, Void> {
	private static final int CHECKING_INPUTS = 1;
	private static final int UPLOADING = 2;
	private static final int CONVERTING = 3;
	private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger("log4j.logger.org.proteored");
	private final MiapeExtractorDelegate miapeExtractorWebservice;
	private MiapeLocalExtractor miapeLocalExtractor;
	public static final String NOTIFICATION = "notification";
	public static final String MIAPE_MSI_CREATED_DONE = "MIAPE MSI CREATED_DONE";
	public static final String MIAPE_MS_CREATED_DONE = "MIAPE MS CREATED_DONE";
	public static final String MIAPE_CREATION_ERROR = "MIAPE CREATION ERROR";
	public static final String MIAPE_CREATION_CANCELED = "MIAPE CREATION CANCELED";
	public static final String MIAPE_CREATION_TOTAL_DONE = "MIAPE CREATION TOTAL DONE";
	public static final String MIAPE_CREATION_STARTS = "MIAPE CREATION STARTS";
	public static final String MIAPE_CREATION_UPLOADING_FILE = "MIAPE CREATION UPLOADING FILE";
	public static final String MIAPE_CREATION_UPLOADING_FILE_DONE = "MIAPE CREATION UPLOADING FILE DONE";
	public static final String MIAPE_CREATION_WAITING_FOR_SERVER = "MIAPE CREATION WAITING FOR SERVER RESPONSE";
	public static final String MIAPE_CREATION_COMPRESSING_FILE = "MIAPE CREATION COMPRESSING FILE";
	public static final String MIAPE_CREATION_COMPRESSING_FILE_DONE = "MIAPE CREATION COMPRESSING FILE DONE";
	public static final String MIAPE_CREATION_SENDING_MIAPE_TO_SERVER = "MIAPE CREATION SENDING MIAPE TO SERVER";
	public static final String MIAPE_CREATION_WAITING_FOR_OTHER_JOB_COMPLETION = "MIAPE_CREATION_WAITING_FOR_OTHER_JOB_COMPLETION";

	private static int numTasks = 1;
	private int identifier;
	/*
	 * Main task. Executed in background threadProgress.
	 */
	private final MiapeExtractionRunParameters miapeExtractorInputParameters;
	// private Thread threadProgress;
	private final String userName;
	private final String password;
	private int taskStatus;
	private long initialTime;
	// private String firstUploadedFile;
	// private String secondUploadedFile;
	private String directLinksText;
	private String id_msi;
	private String id_ms;
	private final MiapeAPIWebserviceDelegate miapeAPIWebservice;
	private String uploadedMGFFile;
	private String uploadedMzMLFile;
	private boolean localProcessingInParallel = false;
	private boolean storeInRepository;

	public MiapeExtractionTask(MiapeExtractionRunParameters params, MiapeExtractorDelegate miapeExtractorWebservice,
			MiapeAPIWebserviceDelegate miapeAPIWebservice, String userName, String password,
			boolean localProcessingInParallel) {
		this(params, miapeExtractorWebservice, miapeAPIWebservice, userName, password);
		this.localProcessingInParallel = localProcessingInParallel;

	}

	public MiapeExtractionTask(MiapeExtractionRunParameters params, MiapeExtractorDelegate miapeExtractorWebservice,
			MiapeAPIWebserviceDelegate miapeAPIWebservice, String userName, String password) {
		miapeExtractorInputParameters = params;
		this.miapeExtractorWebservice = miapeExtractorWebservice;
		this.miapeAPIWebservice = miapeAPIWebservice;
		this.userName = userName;
		this.password = password;
		storeInRepository = true;
		if (params != null)
			storeInRepository = params.storeMIAPEsInDB();

		identifier = MiapeExtractionTask.numTasks++;

	}

	public MiapeExtractionTask(Integer runIdentifier, MiapeExtractionRunParameters parameters,
			MiapeExtractorDelegate miapeExtractorWebservice2, MiapeAPIWebserviceDelegate miapeAPIWebservice,
			String userName2, String password2, boolean processInParallel) {

		this(parameters, miapeExtractorWebservice2, miapeAPIWebservice, userName2, password2, processInParallel);
		if (runIdentifier != null)
			identifier = runIdentifier;

		log.info("Creating new MIAPE Extraction job= " + identifier);
		log.info(miapeExtractorInputParameters);

	}

	public MiapeExtractionTask(Integer runIdentifier, MiapeExtractionRunParameters parameters,
			MiapeExtractorDelegate miapeExtractorWebservice2, MiapeAPIWebserviceDelegate miapeAPIWebservice,
			String userName2, String password2) {

		this(parameters, miapeExtractorWebservice2, miapeAPIWebservice, userName2, password2);
		if (runIdentifier != null)
			identifier = runIdentifier;

		log.info("Creating new MIAPE Extraction job= " + identifier);
		log.info(miapeExtractorInputParameters);

	}

	public static void resetIdentifiers() {
		MiapeExtractionTask.numTasks = 1;
	}

	private boolean checkInputs() {
		taskStatus = CHECKING_INPUTS;
		if (miapeExtractorInputParameters.isMzMLSelected() && "".equals(getFirstInputFileName())) {
			firePropertyChange(MIAPE_CREATION_ERROR, null,
					new MiapeExtractionResult(identifier, "Error. Select one file to upload."));
			return false;
		}
		if (miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected()) {
			if ("".equals(miapeExtractorInputParameters.getMgfFileName())) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error. Select the MGF peak list file"));
				return false;
			}
			if (miapeExtractorInputParameters.getMiapeMSMetadata() == null) {
				firePropertyChange(MIAPE_CREATION_ERROR, null, new MiapeExtractionResult(identifier,
						"Error. Some metadata is required in order to complete the MS dataset information"));
				return false;
			}

		}
		if (miapeExtractorInputParameters.isMGFSelected()) {
			if ("".equals(miapeExtractorInputParameters.getMgfFileName())) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error. Select the MGF peak list file"));
				return false;
			}
			if (miapeExtractorInputParameters.getMiapeMSMetadata() == null) {
				firePropertyChange(MIAPE_CREATION_ERROR, null, new MiapeExtractionResult(identifier,
						"Error. Some metadata is required in order to complete the MS dataset information"));
				return false;
			}

		}
		if (miapeExtractorInputParameters.isMzMLPlusMzIdentMLSelected()
				|| miapeExtractorInputParameters.isMzIdentMLSelected()
				|| miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected()) {
			if ("".equals(miapeExtractorInputParameters.getMzIdentMLFileName())) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error. Select the mzIdentML file"));
				return false;
			}
		}
		if (miapeExtractorInputParameters.isXTandemPlusMGFSelected()
				|| miapeExtractorInputParameters.isXTandemSelected()) {
			if ("".equals(miapeExtractorInputParameters.getXTandemFileName())) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error. Select the XTandem XML file"));
				return false;
			}
		}
		if (miapeExtractorInputParameters.isDTASelectPlusMGFSelected()
				|| miapeExtractorInputParameters.isDTASelectSelected()) {
			if ("".equals(miapeExtractorInputParameters.getDtaSelectFileName())) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error. Select the DTASelect-filter txt file"));
				return false;
			}
		}
		if (!miapeExtractorInputParameters.isMIAPEMSChecked() && !miapeExtractorInputParameters.isMIAPEMSIChecked()) {
			firePropertyChange(MIAPE_CREATION_ERROR, null,
					new MiapeExtractionResult(identifier, "Error. Select one output MIAPE type."));
			return false;
		}

		if (miapeExtractorInputParameters.getProjectName().equals("")) {
			firePropertyChange(MIAPE_CREATION_ERROR, null,
					new MiapeExtractionResult(identifier, "Error. You need to state a project name.\n"
							+ "If the project doesn't exist, it will be created.\n"
							+ "If the project already exists, the dataset(s) will be created in that project."));
			return false;
		}
		if (getParameters().getAssociatedMiapeMSGeneratorJob() != null
				&& getParameters().getAssociatedMiapeMS() == null) {
			firePropertyChange(MIAPE_CREATION_WAITING_FOR_OTHER_JOB_COMPLETION, null,
					new MiapeExtractionResult(identifier,
							"The job '" + identifier + "' is waiting for the completion of job '"
									+ getParameters().getAssociatedMiapeMSGeneratorJob()
									+ "' because it will use its MS dataset generated"));
			return false;
		}
		return true;
	}

	public boolean isLocalProcessingInParallel() {
		return localProcessingInParallel;
	}

	public void setLocalProcessingInParallel(boolean localProcessingInParallel) {
		this.localProcessingInParallel = localProcessingInParallel;
	}

	/**
	 * Main method which convert the standard files to MIAPEs
	 *
	 * @throws WrongXMLFormatException
	 * @throws IOException
	 * @throws MethodNotSupportedException
	 */
	private void convertFile2MIAPE() throws IOException, MethodNotSupportedException {

		if (miapeExtractorInputParameters.isLocalProcessing())
			miapeLocalExtractor = new MiapeLocalExtractor(miapeAPIWebservice, this, identifier, storeInRepository,
					localProcessingInParallel);

		id_msi = null;
		id_ms = null;
		MiapeMSDocument miapeMSMetadata = miapeExtractorInputParameters.getMiapeMSMetadata();
		MiapeXmlFile<MiapeMSDocument> tinnyMiapeMS = null;
		if (miapeMSMetadata != null)
			tinnyMiapeMS = miapeMSMetadata.toXml();
		// String fileFormat = parentDialog.
		// .inputFileFormatGroup.getSelection().getActionCommand();
		// if (fileFormat.equals(XmlFormat.MZ_IDENT.id)) {
		if (miapeExtractorInputParameters.isMzMLSelected()) {
			extractMIAPEfromMzMLFile(miapeExtractorInputParameters.isFastParsing(), tinnyMiapeMS);
		} else if (miapeExtractorInputParameters.isMzIdentMLSelected()
				|| miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected()) {
			extractMIAPEfromMzIdentMLFile(tinnyMiapeMS);
			// }else if(fileFormat.equals(XmlFormat.PRIDE.id)) {
		} else if (miapeExtractorInputParameters.isMGFSelected()) {
			extractMIAPEfromMGFFile(tinnyMiapeMS);
			// }else if(fileFormat.equals(XmlFormat.PRIDE.id)) {
		} else if (miapeExtractorInputParameters.isMzMLPlusMzIdentMLSelected()) {
			extractMIAPEfromMzMLAndMzIdentMLFile(miapeExtractorInputParameters.isFastParsing(), tinnyMiapeMS);
		} else if (miapeExtractorInputParameters.isXTandemSelected()
				|| miapeExtractorInputParameters.isXTandemPlusMGFSelected()) {
			extractMIAPEfromXTandemXMLFile(tinnyMiapeMS);
		} else if (miapeExtractorInputParameters.isDTASelectSelected()
				|| miapeExtractorInputParameters.isDTASelectPlusMGFSelected()) {
			extractMIAPEfromDTASelectFile(tinnyMiapeMS);
		} else if (miapeExtractorInputParameters.isTSVSelected()) {
			extractMIAPEfromTSVFile(tinnyMiapeMS, miapeExtractorInputParameters.getSeparator());
		} else if (miapeExtractorInputParameters.isPRIDESelected()) {
			if (miapeExtractorInputParameters.isMIAPEMSChecked() && miapeExtractorInputParameters.isMIAPEMSIChecked()) {
				extractMIAPEfromPrideFile("MS_MSI");
			} else if (miapeExtractorInputParameters.isMIAPEMSChecked()) {
				extractMIAPEfromPrideFile("MS");
			} else if (miapeExtractorInputParameters.isMIAPEMSIChecked()) {
				extractMIAPEfromPrideFile("MSI");
			}
		}

		// standard2MIAPEFrame.waiting.close();

	}

	private void extractMIAPEfromMzMLAndMzIdentMLFile(boolean fastParser, MiapeXmlFile<MiapeMSDocument> tinnyMiapeMS) {

		taskStatus = UPLOADING;
		String mzMLfile = miapeExtractorInputParameters.getMzMLFileName();
		if (!miapeExtractorInputParameters.isLocalProcessing()) {
			mzMLfile = uploadFile(mzMLfile);
			uploadedMzMLFile = mzMLfile;
		}
		String mzIdentMLFile = miapeExtractorInputParameters.getMzIdentMLFileName();
		if (!miapeExtractorInputParameters.isLocalProcessing())
			mzIdentMLFile = uploadFile(mzIdentMLFile);

		taskStatus = CONVERTING;
		firePropertyChange(NOTIFICATION, null, "Extracting data from mzML file...");

		String miapeMSMetadataFilePath = null;
		if (tinnyMiapeMS != null) {
			miapeMSMetadataFilePath = tinnyMiapeMS.toFile().getAbsolutePath();
			// just upload metadata file if not localprocessing
			// just add resulting data if not localprocessing
			if (!miapeExtractorInputParameters.isLocalProcessing()) {

				miapeMSMetadataFilePath = uploadFile(miapeMSMetadataFilePath);
			}
		}
		String[] identifiers;
		if (miapeExtractorInputParameters.isLocalProcessing()) {
			if (tinnyMiapeMS != null)
				identifiers = miapeLocalExtractor.storeMiapeMSMSIFromMzMLAndMzIdentMLAndMetadata(mzMLfile,
						miapeMSMetadataFilePath, mzIdentMLFile, userName, password,
						miapeExtractorInputParameters.getProjectName(), fastParser);
			else
				identifiers = miapeLocalExtractor.storeMiapeMSMSIFromMzMLAndMzIdentML(mzMLfile, mzIdentMLFile, userName,
						password, miapeExtractorInputParameters.getProjectName(), fastParser);
		} else {
			firePropertyChange(NOTIFICATION, null, "Waiting for server response...");
			firePropertyChange(MIAPE_CREATION_WAITING_FOR_SERVER, null, getRunIdentifier());
			if (tinnyMiapeMS != null)
				identifiers = miapeExtractorWebservice.storeMiapeMSMSIFromMzMLandMzIdentMLAndMetadata(mzMLfile,
						miapeMSMetadataFilePath, mzIdentMLFile, userName, password,
						miapeExtractorInputParameters.getProjectName(), fastParser, MainFrame.emailNotifications)
						.toArray(new String[0]);
			else
				identifiers = miapeExtractorWebservice.storeMiapeMSMSIFromMzMLandMzIdentML(mzMLfile, mzIdentMLFile,
						userName, password, miapeExtractorInputParameters.getProjectName(), fastParser,
						MainFrame.emailNotifications).toArray(new String[0]);
		}

		if (identifiers[1] != null && !"".equals(identifiers[1]))
			id_msi = identifiers[1];
		if (identifiers[0] != null && !"".equals(identifiers[0]))
			id_ms = identifiers[0];
		checkOutput();

	}

	private void extractMIAPEfromMGFFile(MiapeXmlFile<MiapeMSDocument> miapeMsXML) throws IOException {

		taskStatus = UPLOADING;
		if (miapeExtractorInputParameters.isLocalProcessing()) {
			uploadedMGFFile = uploadFile(miapeExtractorInputParameters.getMgfFileName());
		}

		firePropertyChange(NOTIFICATION, null, "Extracting data from MGF file + metadata...");
		taskStatus = CONVERTING;

		String identifier;

		MiapeXmlFile<MiapeMSDocument> miapeMSWithResultingData = addResultingData(miapeMsXML,
				miapeExtractorInputParameters.getProjectName());
		// log.info(miapeMsXML);
		if (miapeExtractorInputParameters.isLocalProcessing()) {
			identifier = miapeLocalExtractor.storeMiapeMS(miapeMSWithResultingData.toDocument(), userName, password,
					miapeExtractorInputParameters.getProjectName());

		} else {
			try {
				Thread.sleep(1L);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			firePropertyChange(NOTIFICATION, null, "Waiting for server response...");
			firePropertyChange(MIAPE_CREATION_WAITING_FOR_SERVER, null, getRunIdentifier());

			try {
				identifier = String.valueOf(
						miapeAPIWebservice.storeMiapeMS(userName, password, miapeMSWithResultingData.toBytes()));
			} catch (MiapeDatabaseException_Exception e) {
				e.printStackTrace();
				identifier = e.getMessage();
			} catch (MiapeSecurityException_Exception e) {
				e.printStackTrace();
				identifier = e.getMessage();
			}
		}
		if (identifier != null)
			id_ms = identifier;

		id_msi = null;
		checkOutput();
	}

	private void extractMIAPEfromMzIdentMLFile(MiapeXmlFile<MiapeMSDocument> miapeMsXML) throws IOException {

		taskStatus = UPLOADING;
		String mzIdentMLfile = miapeExtractorInputParameters.getMzIdentMLFileName();
		if (!miapeExtractorInputParameters.isLocalProcessing()) {
			mzIdentMLfile = uploadFile(mzIdentMLfile);
			if (miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected())
				uploadedMGFFile = uploadFile(miapeExtractorInputParameters.getMgfFileName());
		} else {
			if (miapeExtractorInputParameters.isXTandemPlusMGFSelected())
				uploadedMGFFile = miapeExtractorInputParameters.getMgfFileName();
		}

		taskStatus = CONVERTING;

		String[] identifiers = new String[2];

		if (miapeMsXML != null) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from mzIdentML file + metadata...");
			MiapeXmlFile<MiapeMSDocument> miapeMSWithResultingData = addResultingData(miapeMsXML,
					miapeExtractorInputParameters.getProjectName());
			// log.info(miapeMsXML);
			if (miapeExtractorInputParameters.isLocalProcessing()) {
				identifiers = miapeLocalExtractor.storeMiapeMSMSIFromMzIdentML(mzIdentMLfile,
						miapeMSWithResultingData.toBytes(), userName, password,
						miapeExtractorInputParameters.getProjectName());
			} else {
				try {
					Thread.sleep(1L);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				firePropertyChange(NOTIFICATION, null, "Waiting for server response...");
				firePropertyChange(MIAPE_CREATION_WAITING_FOR_SERVER, null, getRunIdentifier());
				log.info(miapeMsXML);
				identifiers = miapeExtractorWebservice
						.storeMiapeMSMSIFromMzIdentML(mzIdentMLfile, miapeMSWithResultingData.toBytes(), userName,
								password, miapeExtractorInputParameters.getProjectName(), MainFrame.emailNotifications)
						.toArray(new String[0]);
			}
			if (identifiers[1] != null && !"".equals(identifiers[1]))
				id_msi = identifiers[1];
			if (identifiers[0] != null && !"".equals(identifiers[0]))
				id_ms = identifiers[0];

		} else {
			firePropertyChange(NOTIFICATION, null, "Extracting data from mzIdentML file...");

			int idMS = -1;
			Integer associatedMiapeMSID = miapeExtractorInputParameters.getAssociatedMiapeMS();
			if (associatedMiapeMSID != null)
				idMS = associatedMiapeMSID;

			if (miapeExtractorInputParameters.isLocalProcessing()) {
				identifiers = miapeLocalExtractor.storeMiapeMSIFromMzIdentML(mzIdentMLfile, idMS, userName, password,
						miapeExtractorInputParameters.getProjectName());
				id_msi = identifiers[1];
				id_ms = identifiers[0];

			} else {
				firePropertyChange(NOTIFICATION, null, "Waiting for server response...");
				firePropertyChange(MIAPE_CREATION_WAITING_FOR_SERVER, null, getRunIdentifier());
				identifiers = miapeExtractorWebservice
						.storeMiapeMSIFromMzIdentML(mzIdentMLfile, idMS, userName, password,
								miapeExtractorInputParameters.getProjectName(), MainFrame.emailNotifications)
						.toArray(new String[0]);
				id_msi = identifiers[1];
				id_ms = identifiers[0];
			}

		}
		checkOutput();
	}

	/**
	 * Add resulting data to the miape ms document.
	 *
	 * @param miapeMsXML
	 * @return
	 */
	private MiapeXmlFile<MiapeMSDocument> addResultingData(MiapeXmlFile<MiapeMSDocument> miapeMsXML,
			String projectName) {

		ResultingData resultingData = getResultingDataFromUploadedFile(projectName);
		if (resultingData != null) {
			ResultingDataAdapter resultingDataAdapter = new ResultingDataAdapter(resultingData, new ObjectFactory(),
					new MsControlVocabularyXmlFactory(new ObjectFactory(), getCvManager()));
			try {
				File file = miapeMsXML.toFile();
				JAXBContext jc = JAXBContext.newInstance("org.proteored.miapeapi.xml.ms.autogenerated");
				Unmarshaller unmarshaller = jc.createUnmarshaller();

				MSMIAPEMS miapeMS = (MSMIAPEMS) unmarshaller.unmarshal(file);
				miapeMS.getMSResultingData().add(resultingDataAdapter.adapt());

				MiapeMSDocument doc = new MiapeMSDocumentImpl(miapeMS, null, getCvManager(), userName, password);
				return doc.toXml();
			} catch (JAXBException e) {
				e.printStackTrace();
			}
		}
		return miapeMsXML;
	}

	private ResultingData getResultingDataFromUploadedFile(String projectName) {
		String fileType = null;
		String fileName = null;
		String fileLocation = null;
		if (miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected() || miapeExtractorInputParameters.isMGFSelected()
				|| miapeExtractorInputParameters.isXTandemPlusMGFSelected()) {
			fileName = "MGF file";
			fileType = MSFileType.getInstance(getCvManager()).getCVTermByAccession(MSFileType.MASCOT_MGF)
					.getPreferredName();
			// if remote repository is not selected to store the files, save
			// first the mgf file locally
			if (!miapeExtractorInputParameters.storeMIAPEsInDB()) {
				try {
					uploadedMGFFile = FileManager.saveLocalFile(uploadedMGFFile, projectName).toURI().toString();
					LocalFilesIndex.getInstance().indexFileByProjectName(projectName, uploadedMGFFile);
				} catch (IOException e) {

				}
			}
			fileLocation = uploadedMGFFile;
		} else if (miapeExtractorInputParameters.isMzMLPlusMzIdentMLSelected()
				|| miapeExtractorInputParameters.isMzMLSelected()) {
			fileName = "mzML file";
			fileType = MSFileType.getInstance(getCvManager()).getCVTermByAccession(MSFileType.MZML_ACC)
					.getPreferredName();
			if (!miapeExtractorInputParameters.storeMIAPEsInDB()) {
				try {
					uploadedMzMLFile = FileManager.saveLocalFile(uploadedMzMLFile, projectName).toURI().toString();
					LocalFilesIndex.getInstance().indexFileByProjectName(projectName, uploadedMzMLFile);
				} catch (IOException e) {

				}
			}
			fileLocation = uploadedMzMLFile;
		}
		if (fileName != null)
			return MiapeMSDocumentFactory.createResultingDataBuilder(fileName).dataFileType(fileType)
					.dataFileURI(fileLocation).build();
		return null;
	}

	private ControlVocabularyManager getCvManager() {
		return OntologyLoaderTask.getCvManager();
	}

	private void extractMIAPEfromMzMLFile(boolean fastParser, MiapeXmlFile<MiapeMSDocument> miapeMsXML) {

		taskStatus = UPLOADING;
		String mzMLfile = miapeExtractorInputParameters.getMzMLFileName();
		if (!miapeExtractorInputParameters.isLocalProcessing())
			mzMLfile = uploadFile(mzMLfile);

		taskStatus = CONVERTING;
		firePropertyChange(NOTIFICATION, null, "Extracting data from mzML file...");
		final MiapeMSDocument miapeMSMetadata = miapeExtractorInputParameters.getMiapeMSMetadata();
		String miapeMSMetadataFilePath = null;
		if (miapeMsXML != null) {
			miapeMSMetadataFilePath = miapeMsXML.toFile().getAbsolutePath();
			// just upload metadata file if not localprocessing
			// just add resulting data if not localprocessing
			if (!miapeExtractorInputParameters.isLocalProcessing()) {
				miapeMSMetadataFilePath = uploadFile(miapeMSMetadataFilePath);
			}
		}
		String[] identifiers = new String[2];
		if (miapeExtractorInputParameters.isLocalProcessing()) {
			if (miapeMSMetadata != null)
				id_ms = miapeLocalExtractor.storeMiapeMSFromMzMLAndMetadata(mzMLfile, miapeMSMetadataFilePath, userName,
						password, miapeExtractorInputParameters.getProjectName(), fastParser);
			else
				id_ms = miapeLocalExtractor.storeMiapeMSFromMzML(mzMLfile, userName, password,
						miapeExtractorInputParameters.getProjectName(), fastParser);
			id_msi = null;
		} else {
			firePropertyChange(NOTIFICATION, null, "Waiting for server response...");
			firePropertyChange(MIAPE_CREATION_WAITING_FOR_SERVER, null, getRunIdentifier());

			if (miapeMSMetadata != null)
				identifiers = miapeExtractorWebservice.storeMiapeMSFromMzMLAndMetadata(mzMLfile,
						miapeMSMetadataFilePath, -1, userName, password, miapeExtractorInputParameters.getProjectName(),
						fastParser, MainFrame.emailNotifications).toArray(new String[0]);
			else
				identifiers = miapeExtractorWebservice.storeMiapeMSFromMzML(mzMLfile, -1, userName, password,
						miapeExtractorInputParameters.getProjectName(), fastParser, MainFrame.emailNotifications)
						.toArray(new String[0]);
			if (identifiers[1] != null && !"".equals(identifiers[1]))
				id_msi = identifiers[1];
			if (identifiers[0] != null && !"".equals(identifiers[0]))
				id_ms = identifiers[0];
		}

		checkOutput();

	}

	private void extractMIAPEfromXTandemXMLFile(MiapeXmlFile<MiapeMSDocument> miapeMsXML) throws IOException {

		taskStatus = UPLOADING;
		String xTandemXMLfile = miapeExtractorInputParameters.getXTandemFileName();
		if (!miapeExtractorInputParameters.isLocalProcessing()) {
			xTandemXMLfile = uploadFile(xTandemXMLfile);
			if (miapeExtractorInputParameters.isXTandemPlusMGFSelected())
				uploadedMGFFile = uploadFile(miapeExtractorInputParameters.getMgfFileName());
		} else {
			if (miapeExtractorInputParameters.isXTandemPlusMGFSelected())
				uploadedMGFFile = miapeExtractorInputParameters.getMgfFileName();
		}

		taskStatus = CONVERTING;

		String[] identifiers = new String[2];

		if (miapeMsXML != null) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from XTandem XML file + metadata...");
			MiapeXmlFile<MiapeMSDocument> miapeMSWithResultingData = addResultingData(miapeMsXML,
					miapeExtractorInputParameters.getProjectName());
			// log.info(miapeMsXML);
			if (miapeExtractorInputParameters.isLocalProcessing()) {
				identifiers = miapeLocalExtractor.storeMiapeMSMSIFromXTandemXML(xTandemXMLfile,
						miapeMSWithResultingData.toBytes(), userName, password,
						miapeExtractorInputParameters.getProjectName());
			} else {
				try {
					Thread.sleep(1L);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				firePropertyChange(NOTIFICATION, null, "Waiting for server response...");
				firePropertyChange(MIAPE_CREATION_WAITING_FOR_SERVER, null, getRunIdentifier());
				log.info(miapeMsXML);
				identifiers = miapeExtractorWebservice
						.storeMiapeMSMSIFromXTandemXML(xTandemXMLfile, miapeMSWithResultingData.toBytes(), userName,
								password, miapeExtractorInputParameters.getProjectName(), MainFrame.emailNotifications)
						.toArray(new String[0]);
			}
			if (identifiers[1] != null && !"".equals(identifiers[1]))
				id_msi = identifiers[1];
			if (identifiers[0] != null && !"".equals(identifiers[0]))
				id_ms = identifiers[0];

		} else {
			firePropertyChange(NOTIFICATION, null, "Extracting data from XTandem XML file...");

			int idMS = -1;
			Integer associatedMiapeMSID = miapeExtractorInputParameters.getAssociatedMiapeMS();
			if (associatedMiapeMSID != null)
				idMS = associatedMiapeMSID;

			if (miapeExtractorInputParameters.isLocalProcessing()) {
				identifiers = miapeLocalExtractor.storeMiapeMSIFromXTandemXML(xTandemXMLfile, idMS, userName, password,
						miapeExtractorInputParameters.getProjectName());
				id_msi = identifiers[1];
				id_ms = identifiers[0];

			} else {
				firePropertyChange(NOTIFICATION, null, "Waiting for server response...");
				firePropertyChange(MIAPE_CREATION_WAITING_FOR_SERVER, null, getRunIdentifier());
				identifiers = miapeExtractorWebservice
						.storeMiapeMSIFromXTandemXML(xTandemXMLfile, idMS, userName, password,
								miapeExtractorInputParameters.getProjectName(), MainFrame.emailNotifications)
						.toArray(new String[0]);
				id_msi = identifiers[1];
				id_ms = identifiers[0];
			}

		}
		checkOutput();

	}

	private void extractMIAPEfromDTASelectFile(MiapeXmlFile<MiapeMSDocument> miapeMsXML)
			throws IOException, MethodNotSupportedException {

		taskStatus = UPLOADING;
		String dtaSelectFile = miapeExtractorInputParameters.getDtaSelectFileName();
		if (!miapeExtractorInputParameters.isLocalProcessing()) {
			dtaSelectFile = uploadFile(dtaSelectFile);
			if (miapeExtractorInputParameters.isDTASelectPlusMGFSelected())
				uploadedMGFFile = uploadFile(miapeExtractorInputParameters.getMgfFileName());
		} else {
			if (miapeExtractorInputParameters.isDTASelectPlusMGFSelected())
				uploadedMGFFile = miapeExtractorInputParameters.getMgfFileName();
		}

		taskStatus = CONVERTING;

		String[] identifiers = new String[2];

		if (miapeMsXML != null) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from DTASelect file + metadata...");
			MiapeXmlFile<MiapeMSDocument> miapeMSWithResultingData = addResultingData(miapeMsXML,
					miapeExtractorInputParameters.getProjectName());
			// log.info(miapeMsXML);
			if (miapeExtractorInputParameters.isLocalProcessing()) {
				identifiers = miapeLocalExtractor.storeMiapeMSMSIFromDTASelect(dtaSelectFile,
						miapeMSWithResultingData.toBytes(), userName, password,
						miapeExtractorInputParameters.getProjectName());
			} else {
				try {
					Thread.sleep(1L);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				throw new MethodNotSupportedException(
						"Extract MIAPE MSI from DTASelect is not supported by webservice");
			}
			if (identifiers[1] != null && !"".equals(identifiers[1]))
				id_msi = identifiers[1];
			if (identifiers[0] != null && !"".equals(identifiers[0]))
				id_ms = identifiers[0];

		} else {
			firePropertyChange(NOTIFICATION, null, "Extracting data from DTASelect file...");

			int idMS = -1;
			Integer associatedMiapeMSID = miapeExtractorInputParameters.getAssociatedMiapeMS();
			if (associatedMiapeMSID != null)
				idMS = associatedMiapeMSID;

			if (miapeExtractorInputParameters.isLocalProcessing()) {
				identifiers = miapeLocalExtractor.storeMiapeMSIFromDTASelect(dtaSelectFile, idMS, userName, password,
						miapeExtractorInputParameters.getProjectName());
				id_msi = identifiers[1];
				id_ms = identifiers[0];

			} else {
				throw new MethodNotSupportedException(
						"Extract MIAPE MSI from DTASelect is not supported by webservice");
			}

		}
		checkOutput();

	}

	private void extractMIAPEfromTSVFile(MiapeXmlFile<MiapeMSDocument> miapeMsXML,
			TableTextFileSeparator tableTextFileSeparator) throws IOException, MethodNotSupportedException {

		taskStatus = UPLOADING;
		String tsvSelectFile = miapeExtractorInputParameters.getTSVSelectFileName();
		if (!miapeExtractorInputParameters.isLocalProcessing()) {
			tsvSelectFile = uploadFile(tsvSelectFile);
		}

		taskStatus = CONVERTING;

		String[] identifiers = new String[2];

		if (miapeMsXML != null) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from TSV file + metadata...");
			MiapeXmlFile<MiapeMSDocument> miapeMSWithResultingData = addResultingData(miapeMsXML,
					miapeExtractorInputParameters.getProjectName());
			// log.info(miapeMsXML);
			if (miapeExtractorInputParameters.isLocalProcessing()) {
				identifiers = miapeLocalExtractor.storeMiapeMSMSIFromTSV(tsvSelectFile,
						miapeExtractorInputParameters.getSeparator(), miapeMSWithResultingData.toBytes(), userName,
						password, miapeExtractorInputParameters.getProjectName());
			} else {
				try {
					Thread.sleep(1L);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				throw new MethodNotSupportedException(
						"Extract MIAPE MSI from DTASelect is not supported by webservice");
			}
			if (identifiers[1] != null && !"".equals(identifiers[1]))
				id_msi = identifiers[1];
			if (identifiers[0] != null && !"".equals(identifiers[0]))
				id_ms = identifiers[0];

		} else {
			firePropertyChange(NOTIFICATION, null, "Extracting data from TSV file...");

			int idMS = -1;
			Integer associatedMiapeMSID = miapeExtractorInputParameters.getAssociatedMiapeMS();
			if (associatedMiapeMSID != null)
				idMS = associatedMiapeMSID;

			if (miapeExtractorInputParameters.isLocalProcessing()) {
				identifiers = miapeLocalExtractor.storeMiapeMSIFromTSV(tsvSelectFile, tableTextFileSeparator, idMS,
						userName, password, miapeExtractorInputParameters.getProjectName());
				id_msi = identifiers[1];
				id_ms = identifiers[0];

			} else {
				throw new MethodNotSupportedException("Extract MIAPE MSI from TSV is not supported by webservice");
			}

		}
		checkOutput();

	}

	private void extractMIAPEfromPrideFile(String miapeType) {
		String[] identifiers = new String[2];

		taskStatus = UPLOADING;
		String prideFile = miapeExtractorInputParameters.getPRIDEXMLFileName();
		if (!miapeExtractorInputParameters.isLocalProcessing())
			prideFile = uploadFile(prideFile);

		taskStatus = CONVERTING;

		final MiapeMSDocument miapeMSMetadata = miapeExtractorInputParameters.getMiapeMSMetadata();
		String miapeMSMetadataFilePath = null;
		if (miapeMSMetadata != null) {
			MiapeXmlFile<MiapeMSDocument> miapeMsXML = miapeMSMetadata.toXml();
			miapeMSMetadataFilePath = miapeMsXML.toFile().getAbsolutePath();
			// just upload metadata file if not localprocessing
			// just add resulting data if not localprocessing
			if (!miapeExtractorInputParameters.isLocalProcessing()) {
				miapeMSMetadataFilePath = uploadFile(miapeMSMetadataFilePath);
			}
			if (miapeType.equals("MSI"))
				miapeType = "MS_MSI";
		}

		// MSI
		if (miapeType.equals("MSI")) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from PRIDE file...");
			if (miapeExtractorInputParameters.isLocalProcessing()) {
				id_msi = miapeLocalExtractor.storeMiapeMSIFromPRIDE(prideFile, userName, password,
						miapeExtractorInputParameters.getProjectName());

			} else {
				firePropertyChange(NOTIFICATION, null, "Waiting for server response...");
				firePropertyChange(MIAPE_CREATION_WAITING_FOR_SERVER, null, getRunIdentifier());

				identifiers = miapeExtractorWebservice
						.storeMiapeMSIFromPRIDE(prideFile, -1, userName, password,
								miapeExtractorInputParameters.getProjectName(), MainFrame.emailNotifications)
						.toArray(new String[0]);
				if (identifiers[1] != null && !"".equals(identifiers[1]))
					id_msi = identifiers[1];
				id_ms = identifiers[0];
			}
			// MS
		} else if (miapeType.equals("MS")) {
			firePropertyChange(NOTIFICATION, null, "Extracting data from PRIDE file...");
			if (miapeExtractorInputParameters.isLocalProcessing()) {
				if (miapeMSMetadata != null)
					id_ms = miapeLocalExtractor.storeMiapeMSFromPRIDEAndMetadata(prideFile, miapeMSMetadataFilePath,
							userName, password, miapeExtractorInputParameters.getProjectName());
				else
					id_ms = miapeLocalExtractor.storeMiapeMSFromPRIDE(prideFile, userName, password,
							miapeExtractorInputParameters.getProjectName());
			} else {
				firePropertyChange(NOTIFICATION, null, "Waiting for server response...");
				firePropertyChange(MIAPE_CREATION_WAITING_FOR_SERVER, null, getRunIdentifier());

				if (miapeMSMetadata != null)
					identifiers = miapeExtractorWebservice.storeMiapeMSFromPRIDEAndMetadata(prideFile,
							miapeMSMetadataFilePath, -1, userName, password,
							miapeExtractorInputParameters.getProjectName(), MainFrame.emailNotifications)
							.toArray(new String[0]);
				else
					identifiers = miapeExtractorWebservice
							.storeMiapeMSFromPRIDE(prideFile, -1, userName, password,
									miapeExtractorInputParameters.getProjectName(), MainFrame.emailNotifications)
							.toArray(new String[0]);
				if (identifiers[0] != null && !"".equals(identifiers[0]))
					id_ms = identifiers[0];
			}
			// MS and MSI
		} else if (miapeType.equals("MS_MSI")) {

			firePropertyChange(NOTIFICATION, null, "Extracting data from PRIDE file...");
			if (miapeExtractorInputParameters.isLocalProcessing()) {
				if (miapeMSMetadata != null)
					identifiers = miapeLocalExtractor.storeMiapeMSMSIFromPRIDEAndMetadata(prideFile,
							miapeMSMetadataFilePath, userName, password,
							miapeExtractorInputParameters.getProjectName());
				else
					identifiers = miapeLocalExtractor.storeMiapeMSMSIFromPRIDE(prideFile, userName, password,
							miapeExtractorInputParameters.getProjectName());
			} else {
				firePropertyChange(NOTIFICATION, null, "Waiting for server response...");
				firePropertyChange(MIAPE_CREATION_WAITING_FOR_SERVER, null, getRunIdentifier());

				if (miapeMSMetadata != null)
					identifiers = miapeExtractorWebservice
							.storeMiapeMSMSIFromPRIDEAndMetadata(prideFile, miapeMSMetadataFilePath, userName, password,
									miapeExtractorInputParameters.getProjectName(), MainFrame.emailNotifications)
							.toArray(new String[0]);
				else
					identifiers = miapeExtractorWebservice
							.storeMiapeMSMSIFromPRIDE(prideFile, userName, password,
									miapeExtractorInputParameters.getProjectName(), MainFrame.emailNotifications)
							.toArray(new String[0]);
			}
			if (identifiers[0] != null && !"".equals(identifiers[0]))
				id_ms = identifiers[0];
			if (identifiers[1] != null && !"".equals(identifiers[1]))
				id_msi = identifiers[1];
		}
		checkOutput();

	}

	/**
	 * Check if the argument starts with "error" and if yes, throws an
	 * WrongXMLFormatException
	 */
	private void checkOutput() {

		if (id_ms != null)
			if ("".equals(id_ms))
				id_ms = null;
			else if (id_ms.startsWith("error")) {
				throw new WrongXMLFormatException(id_ms);
			}
		if (id_msi != null) {
			if ("".equals(id_msi))
				id_msi = null;
			else if (id_msi.startsWith("error")) {
				throw new WrongXMLFormatException(id_msi);
			}
		}
	}

	@Override
	public Void doInBackground() {
		log.info("Number of calls to convert is: " + MiapeExtractionTask.numTasks + " by "
				+ Thread.currentThread().getId() + " thread");

		setProgress(0);

		firePropertyChange(NOTIFICATION, null, "Checking input data.");
		if (checkInputs()) {
			firePropertyChange(MIAPE_CREATION_STARTS, null, identifier);
			firePropertyChange(NOTIFICATION, null, "Input data is correct.");

			try {

				initialTime = System.currentTimeMillis();

				// setProgress(50);
				convertFile2MIAPE();

			} catch (Exception e) {
				e.printStackTrace();
				if (!isCancelled())
					firePropertyChange(MIAPE_CREATION_ERROR, null,
							new MiapeExtractionResult(identifier,
									e.getMessage()
											+ "\nThere was a problem.\nCheck if the format was correct. Try again and if the problem persists,"
											+ " contact support at smartinez@proteored.org"));
				// this.cancel(true);
			} finally {
				// setProgress(100);
			}
		} else {
			// an error message has already fired before in the checkinputs
		}

		// setProgress(100);
		return null;
	}

	private String getFirstInputFileName() {
		if (miapeExtractorInputParameters.isMzMLSelected())
			return miapeExtractorInputParameters.getMzMLFileName();
		if (miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected())
			return miapeExtractorInputParameters.getMzIdentMLFileName();
		if (miapeExtractorInputParameters.isMzIdentMLSelected())
			return miapeExtractorInputParameters.getMzIdentMLFileName();

		if (miapeExtractorInputParameters.isPRIDESelected())
			return miapeExtractorInputParameters.getPRIDEXMLFileName();
		if (miapeExtractorInputParameters.isMzMLPlusMzIdentMLSelected())
			return miapeExtractorInputParameters.getMzMLFileName();
		if (miapeExtractorInputParameters.isXTandemSelected())
			return miapeExtractorInputParameters.getXTandemFileName();
		if (miapeExtractorInputParameters.isMGFSelected())
			return miapeExtractorInputParameters.getMgfFileName();
		return null;
	}

	private String getSecondInputFileName() {

		if (miapeExtractorInputParameters.isMzIdentMLPlusMGFSelected())
			return miapeExtractorInputParameters.getMgfFileName();
		if (miapeExtractorInputParameters.isMzMLPlusMzIdentMLSelected())
			return miapeExtractorInputParameters.getMzIdentMLFileName();

		return null;
	}

	/*
	 * Executed in event dispatching threadProgress
	 */
	@Override
	public void done() {

		Toolkit.getDefaultToolkit().beep();
		// threadProgress.interrupt();
		try {
			setProgress(100);

			if (isCancelled()) {
				firePropertyChange(MIAPE_CREATION_CANCELED, null, identifier);
				return;
			}
			if (taskStatus == CHECKING_INPUTS) {
				return;
			}
			if (taskStatus == UPLOADING) {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error while the file was being uploaded."));
				return;
			}
			if (id_msi != null || id_ms != null) {
				if ((id_msi != null && !id_msi.startsWith("error")) || (id_ms != null && !id_ms.startsWith("error"))) {
					firePropertyChange(NOTIFICATION, null, "Dataset(s) successfully imported");
				}
				File msiUrl = null;
				File msUrl = null;
				if (id_ms != null && !id_ms.startsWith("error")) {
					if (Integer.valueOf(id_ms) > 0) {
						firePropertyChange(MIAPE_MS_CREATED_DONE, null, id_ms);
						if (storeInRepository) {
							// msUrl = MainFrame.miapetool_access_script +
							// "&pmMIAPEType=MS&pmIDMIAPE=" + id_ms;
						} else {
							msUrl = new File(FileManager.getMiapeLocalDataPath(getParameters().getProjectName())
									+ FileManager.getMiapeMSILocalFileName(Integer.valueOf(id_ms), null));
						}
					}
				}
				if (id_msi != null && !id_msi.startsWith("error")) {
					if (Integer.valueOf(id_msi) > 0) {
						firePropertyChange(MIAPE_MSI_CREATED_DONE, null, id_msi);
						if (storeInRepository) {
							// msiUrl = MainFrame.miapetool_access_script +
							// "&pmMIAPETYPE=MSI&pmIDMIAPE=" + id_msi;
						} else {
							msiUrl = new File(FileManager.getMiapeLocalDataPath(getParameters().getProjectName())
									+ FileManager.getMiapeMSILocalFileName(Integer.valueOf(id_msi), null));
						}
					}
				}
				directLinksText = "";
				if (msUrl != null || msiUrl != null)
					directLinksText = "Direct link to your datasets:\n";
				if (msUrl != null)
					directLinksText += msUrl;
				if (msiUrl != null) {
					if (msUrl != null)
						directLinksText += "\n";
					directLinksText += msiUrl;
				}
				if (!"".equals(directLinksText)) {
					firePropertyChange(NOTIFICATION, null, directLinksText);

					long duration = (System.currentTimeMillis() - initialTime) / 60000;
					String unit = "minutes";
					if (duration == 0) {
						duration = (System.currentTimeMillis() - initialTime) / 1000;
						unit = "seconds";
					}

					firePropertyChange(NOTIFICATION, null, "The operation took " + duration + " " + unit);
				}
				// show the option to open a browser or not
				if (msUrl != null || msiUrl != null) {
					MiapeExtractionResult result = new MiapeExtractionResult(identifier);
					if (msUrl != null)
						result.setDirectLinkToMIAPEMS(msUrl);
					if (msiUrl != null)
						result.setDirectLinkToMIAPEMSI(msiUrl);
					result.setDirectLinkText(directLinksText);
					if (id_ms != null && !id_ms.startsWith("error"))
						result.setMiapeMS_Identifier(Integer.valueOf(id_ms));
					if (id_msi != null && !id_msi.startsWith("error"))
						result.setMiapeMSI_Identifier(Integer.valueOf(id_msi));
					result.setMilliseconds(System.currentTimeMillis() - initialTime);
					firePropertyChange(MIAPE_CREATION_TOTAL_DONE, null, result);
				}

			} else {
				firePropertyChange(MIAPE_CREATION_ERROR, null,
						new MiapeExtractionResult(identifier, "Error: Internal error."));
			}

		} catch (Exception e) {
			e.printStackTrace();
			firePropertyChange(MIAPE_CREATION_ERROR, null,
					new MiapeExtractionResult(identifier, "Error: " + e.getMessage()));
		}
	}

	/**
	 * Upload a file reading it from the URL: inputURL. The destination of the
	 * file is located in the ftpPath from the parentDialog
	 *
	 * @param inputURL
	 * @return the URL of the uploaded file
	 */
	private String uploadFile(String inputURL) {

		URL outputURL;
		try {
			File inputFile = new File(inputURL);
			if (!inputFile.exists())
				throw new IllegalArgumentException(
						"The file '" + inputURL + "' doesn't exist or is not available right now");
			log.info("Compressing file: " + inputURL);
			// firstly, compress the file in a temporally file
			File tempZipFile = File.createTempFile(inputFile.getName(), ".gz");
			tempZipFile.deleteOnExit();
			firePropertyChange(NOTIFICATION, null, "Compressing '" + inputURL + "' before the uploading");
			firePropertyChange(NOTIFICATION, null, "Depending on the file size, it may take several minutes...");
			firePropertyChange(MIAPE_CREATION_COMPRESSING_FILE, null, getRunIdentifier());
			tempZipFile = ZipManager.compressGZipFile(inputFile, tempZipFile);
			tempZipFile.deleteOnExit();
			firePropertyChange(NOTIFICATION, null, "File compressed in a temp file: " + tempZipFile.getAbsolutePath());
			firePropertyChange(MIAPE_CREATION_COMPRESSING_FILE_DONE, null, getRunIdentifier());
			// Then upload the file to the ftpPath
			String outputURLString = MainFrame.ftpPath + inputFile.getName() + ".gz";
			outputURL = new URL(outputURLString);
			log.info("Uploading file: " + outputURL);
			URLConnection outputConnection = outputURL.openConnection();
			// waiting = new WaitingDialog();
			// Thread threadProgress = new Thread(waiting);
			// threadProgress.start();
			firePropertyChange(NOTIFICATION, null, "Uploading file...");
			firePropertyChange(MIAPE_CREATION_UPLOADING_FILE, null, getRunIdentifier());
			BufferedOutputStream os = new BufferedOutputStream(outputConnection.getOutputStream()); // To
																									// upload
			BufferedInputStream is = new BufferedInputStream(new FileInputStream(tempZipFile));
			ZipManager.copyInputStream(is, os);

			firePropertyChange(NOTIFICATION, null, "File uploaded");
			log.info("File uploaded: " + inputURL);
			// delete temp file
			if (tempZipFile.delete())
				log.info(tempZipFile.getAbsolutePath() + " removed");
			log.info("File uploaded to: " + outputURLString);
			firePropertyChange(MIAPE_CREATION_UPLOADING_FILE_DONE, null, getRunIdentifier());
			return outputURLString;
		} catch (MalformedURLException e) {
			e.printStackTrace();
			firePropertyChange(MIAPE_CREATION_ERROR, null,
					new MiapeExtractionResult(identifier, "Error uploading file: " + e.getMessage()));
			cancel(true);
		} catch (IOException e) {
			e.printStackTrace();
			firePropertyChange(MIAPE_CREATION_ERROR, null,
					new MiapeExtractionResult(identifier, "Error uploading file: " + e.getMessage()));
			cancel(true);
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
			StringBuilder sb = new StringBuilder();
			sb.append("Error uploading file");
			if (e.getMessage() != null)
				sb.append(": " + e.getMessage());
			sb.append("\n");
			sb.append("Check if the file name is correct or has incorrect characteres");
			firePropertyChange(MIAPE_CREATION_ERROR, null, new MiapeExtractionResult(identifier, sb.toString()));
		}
		throw new IllegalMiapeArgumentException();
	}

	public int getRunIdentifier() {
		return identifier;
	}

	public String getDescription() {
		return miapeExtractorInputParameters.getDescription();
	}

	public MiapeExtractionRunParameters getParameters() {
		return miapeExtractorInputParameters;
	}

	public boolean isLocalMIAPEExtraction() {
		return !storeInRepository;
	}
}
